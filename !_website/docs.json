[
    {
        "id": "0",
        "path": "General/controlflow.md",
        "title": "Controlflow",
        "body": "ControlflowQuick-Nav-   Choice / Branching    -   if/-else    -   switch-   Loops    -   for    -   foreach    -   while    -   do whileChoice / Branchingif/-else    // if statement    if(something == anotherthing){        // do something    }    // --------------------------------------    // if-else statement    if(something == anotherthing){        // do this    }else{        // do that    }    // --------------------------------------    // if-else-if    if(something == anotherthing){        // do this    }else if(something == differentthing){        // do that    }else{        // do something    }switch    // switch-case    switch(something){        case (1):            // do this;            break;        case (2):            // do that            break;        default:            // do default            break;    }Loopsfor    for(var idx = 0; idx <= 10; idx++){        // do stuff        if(something){            // break loop            break;        }    }foreach    var myList.() char{        .() = \"hi \";        .() = \"im \";        .() = \"simon\";    }    var msg char = \"\";    foreach(&myList){        // current element is '.'        msg #= .;    }    echo msg # std::endl;    // => \"hi im simon\"while    while(a != b){        // do until condition is met    }    // ------------------------------------    // while(true) loops can be expressed as forever{...}    forever{        // do something; break loop with 'break' inside a conditional statement    }do while    do{        // do something and check condition AFTERWARDS    }while(a != b);"
    },
    {
        "id": "1",
        "path": "General/editor_settings.md",
        "title": "Editor Settings",
        "body": "Editor SettingsStandard settings-   Tabs: 4 spaces-   Encoding: UTF-8-   Line-Endings: LFVS-Code specificReccomended Extensions:-   ipng Syntax-Highlighting    -   adds Syntax-Highlighting and Code-snippets"
    },
    {
        "id": "2",
        "path": "General/functions.md",
        "title": "functions",
        "body": "functionsFunctions work similar to functions in different languages:1.  functions start with keyword ‘function’2.  function names must be UNIQUE    1.  there is no function overloading (even if 2 funcs have different        args)3.  functions can take arguments    1.  when declaring you can not specify wether argument should be a        reference or copy        1.  caller of function decides wether to pass a reference            (&smth) or a copy    2.  if arguments are specified, they need to have a type        1.  auto is not a valid type for arguments, use any instead4.  Functions can have a return type specified after the arguments    1.  if return type is omitted, its a void return function (void cant        be specified explicitly)    // function [function_name] ([arguments]) [return type] {...}    function myExampleFunc(arg1 int, arg2 byte) bool {...}Related-   mainUses  [[]]"
    },
    {
        "id": "3",
        "path": "General/main.md",
        "title": "main",
        "body": "mainPrototype for main function.    function main (argv.() char) int{        return 0;    }Arguments-   argv.() char:    -   argument list of strings    -   argv.(0) contains script name    -   get number of items with ‘$’ operatorReturns-   out int: anything other than 0 implies a problem has occuredExample    function main (argv.() char) int{        echo \"Hello World!\n\";        return 0;    }"
    },
    {
        "id": "4",
        "path": "Installation/install_ipng.md",
        "title": "How to install ipng",
        "body": "How to install ipng-   Currently works with Linux-   Requires >= g++ 11-   requires makeClone repoClone repo with:-   git https (requires github account token)    git clone https://github.com/ipcomm/ipng.git-   git ssh (requires ssh keys)    git clone git@github.com:ipcomm/ipng.git-   gh cli (reccomended) (requires gh to be setup with github account)    gh repo clone ipcomm/ipng-   smartGitBuild ipng-   cd into ipng/-   source ‘setenv_LinuxUbuntu.sh’ with arg:    -   DEB: Debug build    -   OPT: Release build-   run make with arg ‘all’    cd ipng    source setenv_LinuxUbuntu.sh OPT    make allCreate ipng Registry-   cd into ‘install/LinuxUbuntu/’-   run setup with sudo privileges    cd install/LinuxUbuntu    sudo ./setup-   ipng starter is now installed-   check with:    ipng --version"
    },
    {
        "id": "5",
        "path": "Installation/install_package.md",
        "title": "Install ipng packages",
        "body": "Install ipng packagesInstall ipng first-   Packages contain commands and scripts-   installation via ipng (starter)List currently installed Packages and Commands    ipng --registry    # result :=    # PNG executable    # --------------------    # /home/simon/ipng/obj/LinuxUbuntu/Debug/ipng    # COMMANDS    # --------------------    # cluma                         : /home/simon/ipConvNG/module/CluMa/V1/cluma.exe.ipng    # db                            : /home/simon/ipConvNG/tools/DB/db.exe.ipng    # db2tr                         : /home/simon/ipConvNG/tools/DB/db2tr.exe.ipng    # format                        : /home/simon/ipng/tools/format.exe.ipng    # ipl2ng                        : /home/simon/ipConvNG/tools/ipl2ng/iplink_parser.exe.ipng    # iso2utf                       : /home/simon/ipng/tools/iso2utf.exe.ipng    # ms                            : /home/simon/ipConvNG/tools/MineSweeper/ms.exe.ipng    # pack                          : /home/simon/ipng/tools/pack.exe.ipng    # perf                          : /home/simon/ipng/test/perf.exe.ipng    # registry create               : /home/simon/ipng/tools/ipngRegistry/create.exe.ipng    # registry remove               : /home/simon/ipng/tools/ipngRegistry/remove.exe.ipng    # registry update               : /home/simon/ipng/tools/ipngRegistry/update.exe.ipng    # test                          : /home/simon/ipng/test/test.exe.ipng    # test appl                     : /home/simon/ipConvNG/test/test.exe.ipng    # tr2db                         : /home/simon/ipConvNG/tools/DB/tr2db.exe.ipng    # tryit                         : /home/simon/ipConvNG/tools/TryIt/tryit.exe.ipng    # unpack                        : /home/simon/ipng/tools/unpack.exe.ipng    # worm                          : /home/simon/ipng/test/worm2.exe.ipng    # INSTALLED PACKAGES    # --------------------    # ipConvNG V1    # ipng V1-   Installed Packages are at the bottom, in my case ‘ipng’ , which is    the ipng executable, and ‘ipConvNG’ , the next version of ipConv-   Listed above are commands installed with the packages, and the    script they execute-   execute commands with:    ipng [command]Install package-   Packages to be installed come with a ‘registry.inc.ipng’ file-   Get Path to directory containing ‘registry.inc.ipng’-   call ipng with ‘registry update –pdir path/to/registry.inc.ipng’-   requires sudo privileges    sudo ipng registry update --pdir /home/simon/ipConvNG"
    },
    {
        "id": "6",
        "path": "Namespaces/ascii/constants/control_characters.md",
        "title": "Control Characters Table",
        "body": "Control Characters Table  Character   Byte-Value  ----------- ------------  NUL         0x00  SOH         0x01  STX         0x02  ETX         0x03  EOT         0x04  ENQ         0x05  ACK         0x06  BEL         0x07  BS          0x08  HT          0x09  NL          0x0A  VT          0x0B  NP          0x0C  CR          0x0D  SO          0x0E  SI          0x0F  DLE         0x10  DC1         0x11  DC2         0x12  DC3         0x13  DC4         0x14  NAK         0x15  SYN         0x16  ETB         0x17  CAN         0x18  EM          0x19  SUB         0x1A  ESC         0x1B  FS          0x1C  GS          0x1D  RS          0x1E  US          0x1F  DEL         0x7F"
    },
    {
        "id": "7",
        "path": "Namespaces/ascii/functions/isalnum.md",
        "title": "ascii::isalnum(in char) bool",
        "body": "ascii::isalnum(in char) boolChecks if a single character is an alpha-numerical charNeeds ‘ascii.inc.ipng’ to be includedArguments1.  in char: single character to checkReturns1.  out bool: true if alpha-numeric char, false if notExample    include (\"ascii.inc.ipng\");    function main (argv.() char) int{        var someStr char = \"hallo ich will überprüfen ob sich in diesem String nicht alphanumerische zeichen befinden!\";        for(var idx int = 0; idx < sizeof(someStr); idx++){            if(!ascii::isalnum(someStr[idx])){                echo \"Nicht alphanumerisches zeichen: '\" # someStr[idx] # \"' gefunden!\";            }        }    }"
    },
    {
        "id": "8",
        "path": "Namespaces/ascii/functions/isalpha.md",
        "title": "ascii::isalpha(in char) bool",
        "body": "ascii::isalpha(in char) boolChecks if a single character is an alphabetical charNeeds ‘ascii.inc.ipng’ to be includedArguments1.  in char: single character to checkReturns1.  out bool: true if alphabetical char, false if notExample    include (\"ascii.inc.ipng\");    function main (argv.() char) int{        var someStr char = \"hallo ich will überprüfen ob sich in diesem String nicht alphabetische zeichen befinden!\";        for(var idx int = 0; idx < sizeof(someStr); idx++){            if(!ascii::isalpha(someStr[idx])){                echo \"Nicht alphabetisches zeichen: '\" # someStr[idx] # \"' gefunden!\";            }        }    }"
    },
    {
        "id": "9",
        "path": "Namespaces/ascii/functions/isascii.md",
        "title": "ascii::isascii(in char) bool",
        "body": "ascii::isascii(in char) boolChecks if a single character is an ascii charNeeds ‘ascii.inc.ipng’ to be includedArguments1.  in char: single character to checkReturns1.  out bool: true if ascii char, false if notExample    include (\"ascii.inc.ipng\");    function main (argv.() char) int{        var someStr char = \"hallo ich will überprüfen ob sich in diesem String nicht ascii zeichen befinden!\";        for(var idx int = 0; idx < sizeof(someStr); idx++){            if(ascii::isascii(someStr[idx])){                echo \"Nicht ascii zeichen: '\" # someStr[idx] # \"' gefunden!\";            }        }    }"
    },
    {
        "id": "10",
        "path": "Namespaces/ascii/functions/isdigit.md",
        "title": "ascii::isdigit(in char) bool",
        "body": "ascii::isdigit(in char) boolChecks if a single character is a digitNeeds ‘ascii.inc.ipng’ to be includedArguments1.  in char: single character to checkReturns1.  out bool: true if digit char, false if notExample    include (\"ascii.inc.ipng\");    function main (argv.() char) int{        var someStr char = \"hallo ich will überprüfen ob sich in diesem String zahlen befinden!1\";        for(var idx int = 0; idx < sizeof(someStr); idx++){            if(ascii::isdigit(someStr[idx])){                echo \"Zahl: '\" # someStr[idx] # \"' gefunden!\";            }        }    }"
    },
    {
        "id": "11",
        "path": "Namespaces/ascii/functions/islower.md",
        "title": "ascii::islower(in char) bool",
        "body": "ascii::islower(in char) boolChecks if a single character is lowercaseNeeds ‘ascii.inc.ipng’ to be includedArguments1.  in char: single character to checkReturns1.  out bool: true if lowercase char, false if notExample    include (\"ascii.inc.ipng\");    function main (argv.() char) int{        var someStr char = \"hallo ich will überprüfen ob sich in diesem String kleinbuchstaben befinden!\";        for(var idx int = 0; idx < sizeof(someStr); idx++){            if(ascii::islower(someStr[idx])){                echo \"Kleinbuchstabe: '\" # someStr[idx] # \"' gefunden!\";            }        }    }"
    },
    {
        "id": "12",
        "path": "Namespaces/ascii/functions/isupper.md",
        "title": "ascii::isupper(in char) bool",
        "body": "ascii::isupper(in char) boolChecks if a single character is uppercaseNeeds ‘ascii.inc.ipng’ to be includedArguments1.  in char: single character to checkReturns1.  out bool: true if uppercase char, false if notExample    include (\"ascii.inc.ipng\");    function main (argv.() char) int{        var someStr char = \"hallo ich will überprüfen ob sich in diesem String großbuchstaben befinden!\";        for(var idx int = 0; idx < sizeof(someStr); idx++){            if(ascii::isupper(someStr[idx])){                echo \"Großbuchstabe: '\" # someStr[idx] # \"' gefunden!\";            }        }    }"
    },
    {
        "id": "13",
        "path": "Namespaces/ascii/functions/split.md",
        "title": "ascii::split(in char, pos int, delimiter char) .() char",
        "body": "ascii::split(in char, pos int, delimiter char) .() charSplits a string into a char list ( .() char ) at every occurence ofdelimiterNeeds ‘ascii.inc.ipng’ to be includedArguments1.  in char: string to split at delimiter2.  pos int: position inside string to start splitting from3.  delimiter char: character(-sequence) at which to splitReturns1.  out.() char: reference to .() char list with split elementsExample    include (\"ascii.inc.ipng\");    function main (argv.() char) int{        var someStr char = \"hi!;this!;will!;be!;split\";        var splitUp.() char = ascii::split(someStr, 0, \"!;\");        // =>        // .() = \"hi\"; .() = \"this\"; .() = \"will\"; .() = \"be\"; .() = \"split\"    }"
    },
    {
        "id": "14",
        "path": "Namespaces/ascii/functions/tolower.md",
        "title": "ascii::tolower(in char) char",
        "body": "ascii::tolower(in char) charConverts a string to all lowercaseNeeds ‘ascii.inc.ipng’ to be includedArguments1.  in char: string to convert to lowercaseReturns1.  out char: all lowercase stringExample    include (\"ascii.inc.ipng\");    function main (argv.() char) int{        var someStr char = \"IM WHISPERING\";        var allLower = ascii::tolower(someStr);        // => \"im whispering\"    }"
    },
    {
        "id": "15",
        "path": "Namespaces/ascii/functions/toupper.md",
        "title": "ascii::toupper(in char) char",
        "body": "ascii::toupper(in char) charConverts a string to all uppercaseNeeds ‘ascii.inc.ipng’ to be includedArguments1.  in char: string to convert to uppercaseReturns1.  out char: all uppercase stringExample    include (\"ascii.inc.ipng\");    function main (argv.() char) int{        var someStr char = \"im not screaming.\";        var allUpper = ascii::toupper(someStr);        // => \"IM NOT SCREAMING.\"    }"
    },
    {
        "id": "16",
        "path": "Namespaces/iplink/pack.md",
        "title": "iplink::pack(toPack any) byte",
        "body": "iplink::pack(toPack any) byteSerializes objects to iplink compatible formatArguments1.  toPack any : Object to serializeReturns-   out byte : iplink compatible Serialized ObjectExample    // Create list of numbers    var numbers.() int = {        .() = 1;        .() = 2;        .() = 3;    };    // serialize list    var serializedList byte = iplink::pack(numbers);    // print bytechain to cli    echo std::display(serializedList);    // output := <0381828300>Related:  iplink::unpack std::pack std::unpack"
    },
    {
        "id": "17",
        "path": "Namespaces/iplink/unpack.md",
        "title": "iplink::unpack(buf byte, pos int) any",
        "body": "iplink::unpack(buf byte, pos int) anyUnpacks iplink serialized object to ipng compatible objectArguments1.  buf byte : bytechain containing serialized data2.  pos int : position in buffer to start de-serialization fromReturns-   obj any : returns de-serialized object with its original typeExample    // Serialized list    // numbers {    //     .($) = 1;    //     .($) = 2;    //     .($) = 3;    // };    var serializedList byte = <0381828300>;    // unpack from pos = 0    var deserializedList.() int = iplink::unpack(serializedList, 0);    // Print de-serialized list    echo std::display(deserializedList);    // output := .()=1;.()=2;.()=3;Related:  iplink::pack std::pack std::unpack"
    },
    {
        "id": "18",
        "path": "Namespaces/std/Constants/BDIR.md",
        "title": "std::BDIR",
        "body": "std::BDIRReturns directory of current script as absolute path"
    },
    {
        "id": "19",
        "path": "Namespaces/std/Constants/EXEC.md",
        "title": "std::EXEC",
        "body": "std::EXECReturns absolute path to ipng binary used to run script"
    },
    {
        "id": "20",
        "path": "Namespaces/std/Constants/endl.md",
        "title": "std::endl",
        "body": "std::endl-   newline string constant-   equivalent to “”Example    echo \"Hello world!\" # std::endl;    // same as     ehco \"Hello world!\n\";"
    },
    {
        "id": "21",
        "path": "Namespaces/std/Functions/CreateDirTree.md",
        "title": "std::CreateDirTree(startDir char, dirTree.[char] any)",
        "body": "std::CreateDirTree(startDir char, dirTree.[char] any)NoteNeeds filio.inc.ipng to be included------------------------------------------------------------------------Creates a folder tree specified by dirTree inside startDirArguments1.  startDir char: path to start creating dirtree in2.  dirTree.[char] any: tree structure containing folder structure to    createReturns1.  out voidExample    // create folder structure:    // someDir    // |    // |-dirA    // | |    // | |-dirAa    // |    // |-dirB    //   |    //   |-dirBb    var dirTree.[char] any{        .[\"dirA\"] {            .[\"dirAa\"] = {};        };        .[\"dirB\"] {            .[\"dirBb\"] = {};        };    };    std::CreateDirTree(\"/path/to/someDir\", &dirTree);Related  std::RemoveDirTree"
    },
    {
        "id": "22",
        "path": "Namespaces/std/Functions/FileRead.md",
        "title": "std::FileRead(filePath char) byte",
        "body": "std::FileRead(filePath char) byteNoteNeeds ‘fileio.inc.ipng’ to be includedArguments1.  filePath char: File-name/pathReturn1.  out byte: Contents of file in bytefieldExample    include(fileio.inc.ipng);    // File 'A.txt' with content 'Hello'    var myFile = std::FileRead(\"A.txt\");    echo (char)myFile # std::endl;    // => HelloRelated  std::FileWrite(filename char, buf byte)"
    },
    {
        "id": "23",
        "path": "Namespaces/std/Functions/FileWrite.md",
        "title": "std::FileWrite(filename char, buf byte) bool",
        "body": "std::FileWrite(filename char, buf byte) boolNoteNeeds ‘fileio.inc.ipng’ to be included.Writing to an existing file will destroy the original!Arguments1.  filename char: File-name/path to write2.  buf byte : Buffer to write into fileReturn1.  out bool: true if successfull false if failedExample    include(fileio.inc.ipng);    // File 'A.txt' with content 'Hello'    var success = std::FileWrite(\"B.txt\", \"Goodbye!\");    echo (char)std::FileRead(\"B.txt\") # std::endl;    // => Goodbye!    // second write will destroy original!    success = std::FileWrite(\"B.txt\", \"Overwritten!\");    echo (char)std::FileRead(\"B.txt\") # std::endl;    // => Overweritten!Related  std::FileRead(in char)"
    },
    {
        "id": "24",
        "path": "Namespaces/std/Functions/GetDirTreeSize.md",
        "title": "std::GetDirTreeSize(startDir char) long",
        "body": "std::GetDirTreeSize(startDir char) longNoteNeeds filio.inc.ipng to be includedReturns size of basedirectory in bytes (printFileSize to convert to kb,mb, gb, etc.)Arguments1.  startDir char: path to directory to get size of contentsReturns1.  out long: size of directory contents in byte (this function should    return ulong since there are no negative bytes)Example    // check size of ipng repo    var sizeBytes = std::CreateDirTree(\"/home/simon/ipng\", &dirTree);    // => 569611602LRelated  std::printFileSize"
    },
    {
        "id": "25",
        "path": "Namespaces/std/Functions/ISDIR.md",
        "title": "std::ISDIR(in stat) bool",
        "body": "std::ISDIR(in stat) boolChecks if current file is a folderArguments1.  in stat: stat of file to checkReturns1.  out bool: true when file is folder, false when it’s notExample    // file \"A.txt\" in same dir    var curStat = std::stat(\"A.txt\");    if(std::ISDIR(&curStat)){        // is folder    }else{        // is file    }Related  std::stat"
    },
    {
        "id": "26",
        "path": "Namespaces/std/Functions/ISREG.md",
        "title": "std::ISREG(in stat) bool",
        "body": "std::ISREG(in stat) boolChecks if current file is a regular fileArguments1.  in stat: stat of file to checkReturns1.  out bool: true when file is file, false when it’s notExample    // file \"A.txt\" in same dir    var curStat = std::stat(\"A.txt\");    if(std::ISREG(&curStat)){        // is file    }else{        // is not file    }Related  std::stat std::ISDIR"
    },
    {
        "id": "27",
        "path": "Namespaces/std/Functions/RemoveDirTree.md",
        "title": "std::RemoveDirTree(startDir char)",
        "body": "std::RemoveDirTree(startDir char)NoteNeeds filio.inc.ipng to be included------------------------------------------------------------------------Removes anything starting at startDir including startDirArguments1.  startDir char: path to startDir to remove everything from including    startDirReturns1.  out voidExample    // somedir contains the following folder structure    // someDir    // |    // |-dirA    // | |    // | |-dirAa    // |    // |-dirB    //   |    //   |-dirBb    std::RemoveDirTree(\"/path/to/someDir\");Related  std::RemoveDirTree"
    },
    {
        "id": "28",
        "path": "Namespaces/std/Functions/SplitFileName.md",
        "title": "std::SplitFileName(pathToFile char)",
        "body": "std::SplitFileName(pathToFile char)Splits path to file (linux paths) at every occurence of ‘/’ into a .()char listrequires ‘fileio.inc.ipng’ to be includedArguments1.  pathToFile char: linux path to a fileReturns-   out.() char: path split at every directoryExample    // file at /home/simon/ipng/test.ipng    var filePath = \"/home/simon/ipng/test.ipng\";    var pathSplit.() char = std::SplitFileName(filePath);RelatedUses  [[]]"
    },
    {
        "id": "29",
        "path": "Namespaces/std/Functions/abort.md",
        "title": "std::abort(msg char)",
        "body": "std::abort(msg char)Arguments1.  msg char : Message to show when abortingReturns-   void : Aborts programm and shows Message msgExample    // check if two references are equal    if(std::refeq(&obj1, &obj2) == false){     // abort programm and show message     abort(\"Refrences to obj NOT equal!\");    }RelatedUses  std::refeq"
    },
    {
        "id": "30",
        "path": "Namespaces/std/Functions/assert.md",
        "title": "std::assert({boolean expression})",
        "body": "std::assert({boolean expression})Notestd::assert works ‘inverted’ to c/c++ => throws assertion failed whenexpression returns true!Arguments1.  {boolean expression} : An expression resulting in a booleanReturns-   void : Throws ‘Assertion failed’ when expression evaluates to trueExample    function main (argv.() char) int {     var num int = 5;          // check if num is bigger than 0     std::assert(num > 0);     // output := RUNTIME ERROR: ASSERTION FAILED !     // because the boolean expression resulted in true     return 0;    }RelatedUses  [[]]"
    },
    {
        "id": "31",
        "path": "Namespaces/std/Functions/cal2clock.md",
        "title": "std::cal2clock(in cal) long",
        "body": "std::cal2clock(in cal) longArguments1.  in cal : Calendar ObjectReturns-   out long : Time in seconds since 1970 local timeExample    // get current time    var timeNow long = std::time();    // convert to local time in Calendar obj    var timeLocal = std::localtime(timeNow);    // convert cal obj to seconds local time    var timeMK = std::cal2clock(timeLocal);Related: std::time, std::localtime, std::gmtimeUses  [[]]"
    },
    {
        "id": "32",
        "path": "Namespaces/std/Functions/cal2str.md",
        "title": "std::cal2str(aDate cal) char",
        "body": "std::cal2str(aDate cal) charArguments1.  aDate cal : Time/Date as Calendar ObjectReturns-   out char : Returns Calendar Object in string formatExample    // get current time as calendar object    var time long = std::time();    var calTime = std::gmtime(time);    // convert calendar object to string and display it    var calendarString char = std::cal2str(calTime);    echo std::display(calendarString);Related: std::now, std::time, std::gmtimeUses  std::display"
    },
    {
        "id": "33",
        "path": "Namespaces/std/Functions/cal2time.md",
        "title": "std::cal2time(in cal) long",
        "body": "std::cal2time(in cal) longArguments1.  in cal : Time/Date in Calendar ObjectReturns-   out long : Calendar Object converted to seconds UTCExample    // get current UTC time as Calendar obj    var calObj = std::gmtime(std::time());    // get date from calObj as seconds UTC    var secondsUTC long = std::cal2time(calObj);Related:std::mktime, std::timeUses  [[]]"
    },
    {
        "id": "34",
        "path": "Namespaces/std/Functions/cast.md",
        "title": "std::cast(castType __type, obj2cast any) {casted Input}",
        "body": "std::cast(castType __type, obj2cast any) {casted Input}Arguments1.  castType __type : Type to cast to see this table2.  obj2cast any : Object to castReturns-   out : Casted Object/TypeExample    // Example 1    var idx int = 123;    // Cast to long    var idx_l any = std::cast(std::__type::_long, idx);Related: std::check_castUses  Type Constants"
    },
    {
        "id": "35",
        "path": "Namespaces/std/Functions/chdir.md",
        "title": "std::chdir(folderPath char)",
        "body": "std::chdir(folderPath char)Arguments1.  folderPath : Path to folder as stringReturns-   void : changes current working directory to given folderPathExample    // let current working directory be \"/home/simon/ipng\"    echo std::display(std::getcwd());    // output := \"/home/simon/ipng\"    // change cwd to \"/home/simon/Code\"    std::chdir(\"/home/simon/Code\");    // display cwd again    echo std::display(std::getcwd());    // output := \"/home/simon/Code\"Related: std::getcwdUses  std::display"
    },
    {
        "id": "36",
        "path": "Namespaces/std/Functions/check_cast.md",
        "title": "std::check_cast(castType __type, obj2cast any) bool",
        "body": "std::check_cast(castType __type, obj2cast any) boolArguments1.  castType __type : Type to cast to see this table2.  obj2cast any : Type to cast fromReturns-   out bool : Possible = true; Not-Possible = false;Example    var someInt int = 0;    var someLong long = 1;    // check if its possible to cast from int to long    if(std::check_cast(std::__type::_long, std::__type::_int)){     // do smth....    }Related: std::castUses  [[]]"
    },
    {
        "id": "37",
        "path": "Namespaces/std/Functions/class_name.md",
        "title": "std::class_name(obj any) char",
        "body": "std::class_name(obj any) charArguments1.  obj any : Object of any classReturns-   out char : Name of class as stringExample    class MyClass{     .num1;     ctor Create(){      this.num1 = 1;     }    }    function main(argv.() char) int{     var nameMe = MyClass::Create();     // get name of objects Class      echo std::display(std::class_name(nameMe));     // output := \"MyClass\"     return 0;    }RelatedUses  std::display"
    },
    {
        "id": "38",
        "path": "Namespaces/std/Functions/compare.md",
        "title": "std::compare(typeOfObjs __type, obj1 any, obj2 any) int",
        "body": "std::compare(typeOfObjs __type, obj1 any, obj2 any) intArguments1.  typeOfObjs __type: std::__type of objects to compare2.  obj1 any : Object 1 for comparison3.  obj2 any : Object 2 for comparisonReturns    out int Meaning  --------- --------------         -1 obj1 < obj2          0 obj1 == obj2          1 obj1 > obj2Example    function main (argv.() char) int {        var obj1 any = \"Hello!\";                echo std::display(std::compare(std::typeof(obj1), obj1, \"Hello!\"));        // output := 0    }Related: Type ConstantsUses  std::display"
    },
    {
        "id": "39",
        "path": "Namespaces/std/Functions/display.md",
        "title": "std::display(obj any) char",
        "body": "std::display(obj any) charArguments1.  obj any : any obj of std::__type (Objects of custom type are    displayed as trees)Returns-   out char : Returns string representation of passed argumentExample    // tree with key 'int' and value 'list.() char'       var toDisplay.[int].() char = {        .[1] = {                .() = \"Hello\";            .() = \"World!\";        };          .[9] = {            .() = \"Goodbye\";            .() = \"World!\";        };      };    // print tree to CLI    echo std::display(&toDisplay);Related: std::__typeUses  [[]]"
    },
    {
        "id": "40",
        "path": "Namespaces/std/Functions/equal.md",
        "title": "std::equal(obj1 any, obj2 any) bool",
        "body": "std::equal(obj1 any, obj2 any) boolArguments1.  obj1 any : obj1 for equal-check2.  obj2 any : obj2 for equal-checkReturns-   out bool : true if obj1 == obj2; false if obj1 != obj2Example    var num1 float = 1.9;    var num2 int = 1;    // check if num1 is equal to num2    var isEqual bool = std::equal(num1, num2);    // display isEqual    echo std::display(isEqual);    // output := \"false\"Related: std::compareUses  std::display"
    },
    {
        "id": "41",
        "path": "Namespaces/std/Functions/exit.md",
        "title": "std::exit(returnCode int)",
        "body": "std::exit(returnCode int)Arguments1.  returnCode int :Returns-   void : Exits programm with specified return-codeExample    // create some tree    var tr = {...};    // check if some value exists    if(?tr.[\"a\"]){     ...    }else{     // exit programm with return code '1'     exit(1);    }RelatedUses  [[]]"
    },
    {
        "id": "42",
        "path": "Namespaces/std/Functions/form.md",
        "title": "std::form(str char, obj any) char",
        "body": "std::form(str char, obj any) charArguments1.  str char : Format string containing a special char flag for type    inset2.  obj any : Object or TypeReturns-   out char : String with replaced specifier characterSpecifiers  Specifier            Type  ----------- -------------  %d              int, long  %u            uint, ulong  %s                   char  %c                   byteExample    var f1 = -2;    var f2 = 123456;    var f3 = 5.1234F;    var f4 = \"Hello\";    var f5 = <030203>;    echo std::form(\"f1 is: %d\n\", f1);    // result := f1 is: -2    echo std::form(\"f2 is: %u\n\", f2);    // result := f2 is: 123456    echo std::form(\"f3 is: %f\n\", f3);    // result := f3 is: 5.123400    echo std::form(\"f4 is: %s\n\", f4);    // result := f4 is: Hello    echo std::form(\"f5 is: %c\n\", f5);    // result := f5 is: 030203Related-   echo #### Uses > > [[]]"
    },
    {
        "id": "43",
        "path": "Namespaces/std/Functions/getbit.md",
        "title": "std::getbit(byCh byte, pos int) bool",
        "body": "std::getbit(byCh byte, pos int) boolArguments1.  byCh byte : bytechain to get next set bit from2.  pos int& : position to start finding next set bit fromReturns-   out bool : true = bit is 1, false = bit is 0-   pos int& : sets pos to position of next found set bitExample    //  0123 4567    // '0101 1010' as hex    var myByte byte = <5A>;    // list to save position of set bits    var setPositions.() int;    // get all set bits from start    var pos int = -1;    while(std::getbit(&myByte, &pos){     setPositions.(std::__pel::NewLast) = pos;    }    // display list of set bits in myByte    echo std::display(setPositions);    // output := .()=1;.()=3;.()=4;.()=6;Related: List Constant (__pel)Uses  std::display"
    },
    {
        "id": "44",
        "path": "Namespaces/std/Functions/getcwd.md",
        "title": "std::getcwd() char",
        "body": "]std::getcwd() charArguments1.  void :Returns-   out char : Returns current working directory (absolute path) of    ipng/ipng-starter!Example    // current working directory is := \"/home/simon/ipng\"    // get current working directory as string    var cwd char = std::getcwd();    // display cwd    echo std::display(cwd)    // output := \"/home/simon/ipng\"RelatedUses: std::display  [[]]"
    },
    {
        "id": "45",
        "path": "Namespaces/std/Functions/getpid.md",
        "title": "std::getpid() int",
        "body": "std::getpid() intGet process ID from this instanceArguments1.  void :Returns-   out int : Process ID of current Programm as intExample    var myProcID int = std::getpid();RelatedUses  [[]]"
    },
    {
        "id": "46",
        "path": "Namespaces/std/Functions/gets.md",
        "title": "std::gets()",
        "body": "std::gets()Arguments1.  void : Takes no arguments, gets input from CLI. End input with    ‘ctrl+d’Returns-   out char : CLI input as stringExample    // get user input from cli    var input byte = std::gets();    // process input    switch(input){     case 'y':      ...    }RelatedUses  [[]]"
    },
    {
        "id": "47",
        "path": "Namespaces/std/Functions/gmtime.md",
        "title": "std::gmtime(time long) cal",
        "body": "std::gmtime(time long) calArguments1.  time long : Time in seconds since 1970Returns-   out cal : Calendar Object UTCExample    // get current date in seconds    var todaySec long = std::time();    // create Calendar Object/Struct    var calObj = std::gmtime(todaySec);Related: Calendar ObjectUses  [[]]"
    },
    {
        "id": "48",
        "path": "Namespaces/std/Functions/localtime.md",
        "title": "std::localtime(time long) cal",
        "body": "std::localtime(time long) calArguments1.  time long : Time in seconds since 1970Returns-   out cal : Calendar Object local timeExample    // get UTC time    var timeUTC long = std::time();    // convert UTC to regional time    var timeRegional = std::localtime(timeUTC)Related: std::timeUses  [[]]"
    },
    {
        "id": "49",
        "path": "Namespaces/std/Functions/maskbit.md",
        "title": "std::maskbit(byCh byte) int",
        "body": "std::maskbit(byCh byte) intArguments1.  byCh byte& : bytechain to find and flip ONLY set bitsReturns-   out int : position of found set bit-   byCh byte& : given bytechain, but set bits are now unsetNoteIf bytechain is not passed as reference, only next set bit position getsreturned WITHOUT flipping set bitsExample    /* Example 1: pass bytechain as reference */    //  0123 4567    // '0101 1010' as hex    var myByte byte = <5A>;    // list to save position of set bits    var setPositions.() int;    while(true){     setPositions.(std::__pel::NewLast) = std::maskbit(&myByte);     if(setPositions.(std::__pel::Last) == -1){      break;     }    }    // display list of set bits in myByte    echo std::display(setPositions);    // output := .()=1;.()=3;.()=4;.()=6;    // display myByte    echo std::display(myByte);    // output := <00>    // =========================================================    /* Example 2: pass bytechain as copy */    //  0123 4567    // '0101 1010' as hex    var myByte byte = <5A>;    // list to save position of set bits    var firstSetBit int;    firstSetBit = std::maskbit(myByte);    // display list of set bits in myByte    echo std::display(firstSetBit);    // output := 1;    // display myByte    echo std::display(myByte);    // output := <5a>Related: std::getbit, List Constants(__pel)Uses  [[]]"
    },
    {
        "id": "50",
        "path": "Namespaces/std/Functions/mktime.md",
        "title": "std::mktime(in cal) long",
        "body": "std::mktime(in cal) longArguments1.  in cal : Calendar StructReturns-   out long : Calendar Struct converted to seconds UTCExample    // get current local time (gmt+1) as Calendar strc    var localTime = std::localtime(std::time());    // get date from cal strc as seconds UTC    var secondsUTC = std::mktime(localTime);Related: std::localtime, std::time, std::gmtime, Calendar StructUses  [[]]"
    },
    {
        "id": "51",
        "path": "Namespaces/std/Functions/now.md",
        "title": "std::now() long",
        "body": "std::now() longArguments1.  none :Returns-   out long : time in milliseconds since 1970 (UTC)Example    var p_start long = std::now();    {...some code...}    var timeTaken = std::now() - p_start;Uses  [[]]"
    },
    {
        "id": "52",
        "path": "Namespaces/std/Functions/pack.md",
        "title": "std::pack(toPack any) byte",
        "body": "std::pack(toPack any) byteArguments1.  toPack any : Object to serializeReturns-   out byte : Serialized ObjectExample    // Create list of numbers    var numbers.() int = {     .() = 1;     .() = 2;     .() = 3;    };    // serialize list    var serializedList byte = std::pack(numbers);    // print bytechain to cli    echo std::display(serializedList);    // output := <2C81828300>Related:  std::unpack iplink::pack iplink::unpack"
    },
    {
        "id": "53",
        "path": "Namespaces/std/Functions/parse_const.md",
        "title": "std::parse_const(toParse char, pos int, &obj any) bool",
        "body": "std::parse_const(toParse char, pos int, &obj any) boolArguments1.  toParse char : String to parse from2.  pos int : pos in String to start parsing from3.  &obj any : object reference to put parsed content intoReturns-   out bool : true = parsing successfull; false = parsing    unsuccsessfullExample    // (const) string to parse from    var mySentence char = \"My favourite number is 8\";    // position to start extracting from    var posOfNum = 23;    // memory to put parsed content into    var myFavNum int = 0;    // parse (const) string and iff successfull print parser result    if(std::parse_const(mySentence, posOfNum, &myFavNum)){     echo std::display(myFavNum);    }else{...}RelatedUses  [[]]"
    },
    {
        "id": "54",
        "path": "Namespaces/std/Functions/partof.md",
        "title": "std::partof(isPath path, inPath path)",
        "body": "std::partof(isPath path, inPath path)Arguments1.  isPath path : check if this path is subpath2.  inPath path : path to check if subpath is inReturns-   out bool : Boolean true or falseExample    // Tree with key = [int + char + int] and value char    var myTree.[int].[char].[int] char = {        .[0] = {            .[\"a\"] = {                .[1] = \"Hello!\";            };        };    };          // Path to \"Hello!\" from root = %%.[0].[\"a\"].[1]    var absPath = %%.[0].[\"a\"].[1];    // possible subpath = %%.[0].[a]    var subPath = %%.[0].[\"a\"];    // check if subpath is really subpath    var isSubPath bool = std::partof(&subPath, &absPath);    // display result    echo std::display(isSubPath);    // output := trueUses  std::display"
    },
    {
        "id": "55",
        "path": "Namespaces/std/Functions/printFileSize.md",
        "title": "std::printFileSize(size long) char",
        "body": "std::printFileSize(size long) charNoteNeeds ‘filio.inc.ipng’ to be includedReturns size in B, kB, mB, gB, etcArguments1.  size long: size in bytes to convert to kb, mb, gb, etc (to use with    std::GetDirTreeSize)Returns1.  out char: size of directory contents in byte, kb, mb, gb, etcExample    // check size of ipng repo    var sizeBytes = std::CreateDirTree(\"/home/simon/ipng\", &dirTree);    // => 569611602L    var sizeComp = std::printFileSize(sizeBytes);    // => 569.61MBRelated  std::printFileSize"
    },
    {
        "id": "56",
        "path": "Namespaces/std/Functions/proc_running.md",
        "title": "std::proc_running(somePID int) bool",
        "body": "std::proc_running(somePID int) boolArguments1.  somePID int : Process ID of some ProgramReturns-   out bool : process with given pid (true/exists) : (false/doesnt    exist)Example    if(std::proc_running(somePID)){     std::proc_terminate(somePID);    }else{     ...    }Related: std::getpid, std::proc_terminateUses  [[]]"
    },
    {
        "id": "57",
        "path": "Namespaces/std/Functions/proc_terminate.md",
        "title": "std::proc_terminate(somePID int)",
        "body": "std::proc_terminate(somePID int)Arguments1.  somePID int : PID of process to terminateReturns-   void :Example    if(std::proc_running(somePID)){     std::proc_terminate(somePID);    }else{     ...    }RelatedUses  [[]]"
    },
    {
        "id": "58",
        "path": "Namespaces/std/Functions/random.md",
        "title": "std::random() uint",
        "body": "std::random() uintArguments1.  void :Returns-   out uint : returns random unsigned intExample    // set seed for random generation to 12763     std::seed(12763U);    // get a random value    var rnd_int uint = std::random();Related: std::seedUses  [[]]"
    },
    {
        "id": "59",
        "path": "Namespaces/std/Functions/refeq.md",
        "title": "std::refeq(&ref1 any, &ref2 any) bool",
        "body": "std::refeq(&ref1 any, &ref2 any) boolArguments1.  &ref1 any : Reference to object of any type2.  &ref2 any : Reference to object of any typeReturns-   out bool : true := ref1 == ref2; false := ref1 != ref2Example    // create object from Class 'TestClass'    var ref1 TestClass = TestClass::Create();    // set ref2 to reference of object of TestClass (ref1)    var ref2 TestClass = &ref1;    // check if ref1 and ref2 are the same reference    echo std::display(std::refeq(&ref1, &ref2));    // output := trueRelated: std::equal, std::compareUses  std::display"
    },
    {
        "id": "60",
        "path": "Namespaces/std/Functions/seed.md",
        "title": "std::seed(seedToSet uint)",
        "body": "std::seed(seedToSet uint)Arguments1.  seedToSet uint : Some unsigned integer to use as a seed for random    generationReturns-   void :Example    // set seed for random generation to 12763     std::seed(12763U);    // get a random value    var rnd_int uint = std::random();Related: std::randomUses  [[]]"
    },
    {
        "id": "61",
        "path": "Namespaces/std/Functions/sign.md",
        "title": "std::sign(toSign byte) int",
        "body": "std::sign(toSign byte) intArguments1.  toSign byte : Value in bytes to signReturns-   out int : Signed Value as SI32Example    ??? i dont know ??? help apreciated !!!RelatedUses  [[]]"
    },
    {
        "id": "62",
        "path": "Namespaces/std/Functions/sleep.md",
        "title": "std::sleep(time ulong)",
        "body": "std::sleep(time ulong)Arguments1.  time long : milliseconds to sleep forReturns-   void :Example    // create example list    var somelist.() any = {...};    // check if list has item at index 2    while(?somelist.(2)){     funcThatChangesList(&somelist)     // wait for 5 seconds     std::sleep(5000);    }RelatedUses  [[]]"
    },
    {
        "id": "63",
        "path": "Namespaces/std/Functions/stat.md",
        "title": "std::stat(in char) stat",
        "body": "std::stat(in char) statNoteneeds ‘fileio.inc.ipng’ to be includedArguments1.  in char: path to file to get stat fromReturns1.  out stat: stat structExample    // file 'A.txt'    var curStat = std::stat(\"A.txt\");    if(!std::ISDIR(&curStat)){        // => is file    }else{        // => is folder    }Related  std::ISDIR"
    },
    {
        "id": "64",
        "path": "Namespaces/std/Functions/swap_bit.md",
        "title": "std::swap_bit(toSwap byte) byte",
        "body": "std::swap_bit(toSwap byte) byteArguments1.  toSwap byte : bytechain to invert bits inReturns-   out byte : bytechain containing inverted bitsExample    // '0101 0101' in hex    var myBits byte = <55>    // invert bits in myBytes    var myBitsInv byte = std::swap_bit(myBits);    // display result of invert    echo std::display(myBitsInv);    // output := <AA>    // => '1010 1010'Related: std::swap_byteUses  std::display"
    },
    {
        "id": "65",
        "path": "Namespaces/std/Functions/swap_byte.md",
        "title": "std::swap_byte(toSwap byte) byte",
        "body": "std::swap_byte(toSwap byte) byteNoteWhen half a byte is encountered (eg.: <1>) it gets filled from theright, therefor : <1> => <10>; <12 3> => <12 30>; etc. The swap happensafter the fill.Arguments1.  toSwap byte : Bytechain to swap bytes in. Bytes gets swapped at    pivot point middleReturns-   out byte : Bytechain with swapped bytesExample    /* Example 1 */    var swapMe byte = <30 20 10>;    // swap bytes    echo std::display(std::swap_byte(swapMe));    // output := <10 20 30>    //=========================================    /* Example 2 */    var swapMe byte = <20 10>;    // swap bytes    echo std::display(std::swap_byte(swapMe));    // output := <10 20>    //=========================================    /* Example 3 */    var swapMe byte = <34 1>;    // swap bytes    echo std::display(std::swap_byte(swapMe));    // output := <10 34>     // see note at beginningRelated: std::swap_bitUses  std::display"
    },
    {
        "id": "66",
        "path": "Namespaces/std/Functions/time.md",
        "title": "std::time() long",
        "body": "std::time() longArguments1.  void :Returns-   out long : Returns time since 1970 in seconds (UTC)Example    <code>Uses  [[]]Related: std::now"
    },
    {
        "id": "67",
        "path": "Namespaces/std/Functions/time_date_string.md",
        "title": "std::time_date_string() char",
        "body": "std::time_date_string() charArguments1.  void :Returns-   out char : Returns time and date as stringExample    // get current time and date as string    var dateToday char = std::time_date_string()    // display dateToday    echo std::display(dateToday);    // example output := \"2023/01/30 10:44:19.458\"Related: std::now, std::timeUses  std::display"
    },
    {
        "id": "68",
        "path": "Namespaces/std/Functions/time_tag_string.md",
        "title": "std::time_tag_string() char",
        "body": "std::time_tag_string() charArguments1.  void :Returns-   out char : Current senconds and milliseconds in current minuteExample    // let it be \"2023/01/30 10:49:04.700\"    // get seconds and milliseconds in current minute    var curSecAndMS long = std::time_tag_string();    // display curSecAndMS in console    echo std::display(curSecAndMS);    // output := \"04.700\"Related:std::now, std::timeUses  [[]]"
    },
    {
        "id": "69",
        "path": "Namespaces/std/Functions/trunc.md",
        "title": "std::trunc(byChain byte) byte",
        "body": "std::trunc(byChain byte) byteArguments1.  byChain byte : bytechain to shorten by removing trailing zero-bytesReturns-   out byte : shortened bytechainExample    // bytechain with trailing '<00>'    var myLongByCh byte = <12 34 00 00 00 00>;    // remove trailing 'zero-bytes'    var myShortByCh byte = std::trunc(myLongByCh);    // display result    echo std::display(myShortByCh);    // output := <12 34>RelatedUses  std::display"
    },
    {
        "id": "70",
        "path": "Namespaces/std/Functions/typeof.md",
        "title": "std::typeof(check any) int",
        "body": "std::typeof(check any) int  Type ConstantsArguments1.  check any: Variable to check type ofReturns-   out int : Type of variable checkExample    var check any = 3.14;    if(std::typeof(check) != std::__type::_float){...}Uses  std::__type"
    },
    {
        "id": "71",
        "path": "Namespaces/std/Functions/unpack.md",
        "title": "std::unpack(buf byte, pos int) any",
        "body": "std::unpack(buf byte, pos int) anyArguments1.  buf byte : bytechain containing serialized data2.  pos int : position in buffer to start de-serialization fromReturns-   obj any : returns de-serialized object with its original typeExample    // Serialized list    // var numbers.() int = {    //     .() = 1;    //     .() = 2;    //     .() = 3;    // };    var serializedList byte = <2C81828300>;    // unpack from pos = 0    var deserializedList.() int = std::unpack(serializedList, 0);    // Print de-serialized list    echo std::display(deserializedList);    // output := .()=1;.()=2;.()=3;Related: std::packUses  std::display"
    },
    {
        "id": "72",
        "path": "Namespaces/std/Structs/Calendar.md",
        "title": "Calendar Object",
        "body": "Calendar ObjectCreate    var myTime std::Cal;Inititalize    var myTime std::Cal;    myTime.year = 1970;    myTime.month = 1; // 1 - 12    myTime.day = 1; // 1 - 31    myTime.hour = 0; // 0 - 23    myTime.minute = 1; // 0 - 59    myTime.second = 59; //0 - 59    myTime.isdst = true;    myTime.weekday = 1;    myTime.yearday = 1;Defined as    cal.[int] int{     .[0]; // year as SI32     .[1]; // month as SI32     .[2]; // day as SI32     .[3]; // hour as SI32     .[4]; // minute as SI32     .[5]; // second as SI32     .[6]; // weekday as SI32     .[7]; // yearday as SI32     .[8]; // daylight saving time as bool (false = winter; true = summer)    }Related: std::mktime, std::localtime, std::cal2str, std::cal2time, std::cal2clock"
    },
    {
        "id": "73",
        "path": "Namespaces/std/Structs/stat.md",
        "title": "stat struct",
        "body": "stat structDefined as    struct Stat    {        .st_dev[1]      uint;       /* Equivalent to drive number 0=A 1=B ... */        .st_ino[2]      uint;       /* Always zero ? */        .st_mode[3]     uint;       /* See above constants */        .st_nlink[4]    int;        /* Number of links. */        .st_uid[5]      int;        /* User: Maybe significant on NT ? */        .st_gid[6]      int;        /* Group: Ditto */        .st_size[7]     long;       /* File size in bytes */        .st_atime[8]    long;       /* Accessed date (always 00:00 hrs local * on FAT) */        .st_mtime[9]    long;       /* Modified time */        .st_ctime[10]   long;       /* Creation time */    }constants are defined in ipng source code (ipng/inc/fileio.inc.ipng)Exmaple    // file \"A.txt\" in same dir    var fileStat = std::stat(\"A.txt\");Related:  std::stat std::ISDIR"
    },
    {
        "id": "74",
        "path": "Namespaces/std/Subspaces/Base64/decode.md",
        "title": "Base64::Decode(in char) byte",
        "body": "Base64::Decode(in char) byteDecodes Base64 encoded dataNOT safe for urls (Base64URL decode)Needs ‘base64.inc.ipng’ to be includedArguments1.  in char: String containing base64 encoded elementReturns1.  out byte: decoded base64 bytechainExample    include(\"base.inc.ipng\");    function main (argv.() char) int{        var b64decoded = \"Süße Eichhörnchen kosten viele €\";        var b64encoded = Base64::Eecode(b64decoded);        // => U8O8w59lIEVpY2how7ZybmNoZW4ga29zdGVuIHZpZWxlIOKCrA==    }"
    },
    {
        "id": "75",
        "path": "Namespaces/std/Subspaces/Base64/encode.md",
        "title": "Base64::Encode(in byte) char",
        "body": "Base64::Encode(in byte) charEncodes string with with Base64NOT safe for urls (Base64URL encode)Needs ‘base64.inc.ipng’ to be includedArguments1.  in byte: bytechain to encodeReturns1.  out char: encoded base64 stringExample    include(\"base.inc.ipng\");    function main (argv.() char) int{        var b64encoded = \"U8O8w59lIEVpY2how7ZybmNoZW4ga29zdGVuIHZpZWxlIOKCrA==\";        var b64decoded = Base64::Decode(b64encoded);        // => Süße Eichhörnchen kosten viele €    }"
    },
    {
        "id": "76",
        "path": "Namespaces/std/Subspaces/Base64URL/decode.md",
        "title": "Base64URL::Decode(in char) byte",
        "body": "Base64URL::Decode(in char) byteDecodes Base64 encoded dataSafe for urlsNeeds ‘base64.inc.ipng’ to be includedArguments1.  in char: String containing base64 encoded elementReturns1.  out byte: decoded base64 bytechainExample    include(\"base.inc.ipng\");    function main (argv.() char) int{        var b64decoded = \"Süße Eichhörnchen kosten viele €\";        var b64encoded = Base64URL::Eecode(b64decoded);        // => U8O8w59lIEVpY2how7ZybmNoZW4ga29zdGVuIHZpZWxlIOKCrA==    }"
    },
    {
        "id": "77",
        "path": "Namespaces/std/Subspaces/Base64URL/encode.md",
        "title": "Base64URL::Encode(in byte) char",
        "body": "Base64URL::Encode(in byte) charEncodes string with with Base64Safe for urlsNeeds ‘base64.inc.ipng’ to be includedArguments1.  in byte: bytechain to encodeReturns1.  out char: encoded base64 stringExample    include(\"base.inc.ipng\");    function main (argv.() char) int{        var b64encoded = \"U8O8w59lIEVpY2how7ZybmNoZW4ga29zdGVuIHZpZWxlIOKCrA==\";        var b64decoded = Base64URL::Decode(b64encoded);        // => Süße Eichhörnchen kosten viele €    }"
    },
    {
        "id": "78",
        "path": "Namespaces/std/Subspaces/Net/Functions/gethostbyaddr.md",
        "title": "std::Net::gethostbyaddr(addr byte) hostEntry",
        "body": "std::Net::gethostbyaddr(addr byte) hostEntryArguments1.  addr byte : ip address in byte formatReturns-   out hostEntry : Host Entry Struct containing various informationExample    // get hostEntry struct for 142.250.184.206 (google.com)    var googleHE = std::Net::gethostbyaddr(<8e fa b8 ce>);    // display hostEntry struct    echo std::display(googleHE);    // .[0]=\"google.com\";    // .[1]=2;    // .[3]{    //     .()=<8EFAB8CE>;    //  }Related: [gethostbyaddr|gethostbyaddr]Uses  [[]]"
    },
    {
        "id": "79",
        "path": "Namespaces/std/Subspaces/Net/Functions/gethostbyname.md",
        "title": "std::Net::gethostbyname(name char) hostEntry",
        "body": "std::Net::gethostbyname(name char) hostEntryArguments1.  name char :Returns-   out hostEntry : Host Entry Struct containing various informationExample    // get hostEntry struct for 'google.com'    var googleHE = std::Net::gethostbyname(\"google.com\")    // display hostEntry struct    echo std::display(googleHE);    // .[0]=\"google.com\";    // .[1]=2;    // .[3]{    //     .()=<8EFAB8CE>;    //  }Related:-   gethostbyaddr-   gethostbynameUses  [[]]"
    },
    {
        "id": "80",
        "path": "Namespaces/std/Subspaces/Net/Structs/Host_Entry_Structure.md",
        "title": "HostEntry Structure",
        "body": "HostEntry Structure    hostEntry {     .[0] char;     // \"h_name\"     .[1] int;      // \"h_addrtype\" (1:ipv4; 2:ipv6)     .[2] .() char; // \"h_aliases\"     .[3] .() byte; // \"h_addr_list\" (ip-addr in hex)    }"
    },
    {
        "id": "81",
        "path": "Namespaces/std/Subspaces/__pel/__pel.md",
        "title": "std::__pel::{...}",
        "body": "std::__pel::{…}Variants-   std::__pel::Key-   std::__pel::Index-   std::__pel::Last-   std::__pel::NewLast-   std::__pel::VarKey-   std::__pel::VarIndex-   std::__pel::SKey"
    },
    {
        "id": "82",
        "path": "Namespaces/std/Subspaces/__type/__type.md",
        "title": "std::__type::{_type}",
        "body": "std::__type::{_type}Enum of all types (represented as int)Variants  Type                             int Value  ------------------------------ -----------  std::__type::_idle                       1  std::__type::_bool                       2  std::__type::_int                        3  std::__type::_long                       4  std::__type::_uint                       5  std::__type::_ulong                      6  std::__type::_float                      7  std::__type::_double                     8  std::__type::_byte                       9  std::__type::_char                      10  std::__type::_path                      11  std::__type::_tree_of_int               12  std::__type::_tree_of_long              13  std::__type::_tree_of_uint              14  std::__type::_tree_of_ulong             15  std::__type::_tree_of_float             16  std::__type::_tree_of_double            17  std::__type::_tree_of_byte              18  std::__type::_tree_of_char              19  std::__type::_array                     20  std::__type::_list                      21  std::__type::_class                     22  std::__type::_ref                       23  std::__type::_driver                    25  std::__type::_func                      26Functions-   std::typeof-   std::check_cast"
    },
    {
        "id": "83",
        "path": "Namespaces/std/Subspaces/_byte/functions/alloc.md",
        "title": "std::_byte::alloc(size int) byte",
        "body": "std::_byte::alloc(size int) byteAllocates a bytechain with given size (returnd bytechain is empty butnot {}(idle) )Arguments1.  size int: size in bytesReturns1.  out byte: extracted bytechainExample    function main (argv.() char) int{        var emptyByCh byte = std::_byte::alloc(4);        // => empty bytechain with initial capacity of 4bytes    }"
    },
    {
        "id": "84",
        "path": "Namespaces/std/Subspaces/_byte/functions/pscanx.md",
        "title": "std::_byte::pscanx(in char, pos int) byte",
        "body": "std::_byte::pscanx(in char, pos int) byteScans bytechain from unpit stringArguments1.  in byte: String to read bytechain from2.  pos int: position inside string to start parsing from. If passed as    reference position will be set to first position after parsed valueReturns1.  out byte: extracted bytechainExample    function main (argv.() char) int{        var someBytes char = \"I want my C0FFEE\";        var extracted byte = std::_byte::pscanx(someBytes, 10);        // => <C0FFEE>    }"
    },
    {
        "id": "85",
        "path": "Namespaces/std/Subspaces/_char/functions/alloc.md",
        "title": "std::_char::alloc(size int) char",
        "body": "std::_char::alloc(size int) charAllocates a string with given size (returnd string is empty but not{}(idle) )Arguments1.  size int: size in bytesReturns1.  out char: pre-allocated empty stringExample    function main (argv.() char) int{        var emptyString = std::_char::alloc(4);        // => empty string with initial capacity of 4bytes    }"
    },
    {
        "id": "86",
        "path": "Namespaces/std/Subspaces/_double/Constants/E.md",
        "title": "std::_double::E",
        "body": "std::_double::E                var doubleE = std::_double::E;        // => 2.718281828459FL"
    },
    {
        "id": "87",
        "path": "Namespaces/std/Subspaces/_double/Constants/INFINITY.md",
        "title": "std::_double::INFINITY",
        "body": "std::_double::INFINITY                var doubleE = std::_double::INFINITY;        // => std::_double::INFINITY"
    },
    {
        "id": "88",
        "path": "Namespaces/std/Subspaces/_double/Constants/NAN.md",
        "title": "std::_double::NAN",
        "body": "std::_double::NAN                var doubleE = std::_double::NAN;        // => std::_double::NAN"
    },
    {
        "id": "89",
        "path": "Namespaces/std/Subspaces/_double/Constants/PI.md",
        "title": "std::_double::PI",
        "body": "std::_double::PI                var q_t_PI = std::_double::PI;        // => 3.14159265359FL"
    },
    {
        "id": "90",
        "path": "Namespaces/std/Subspaces/_double/Constants/max.md",
        "title": "std::_double::max",
        "body": "std::_double::max                var dMax = std::_double::max;        // => 1.797693134862e+308FL"
    },
    {
        "id": "91",
        "path": "Namespaces/std/Subspaces/_double/Constants/min.md",
        "title": "std::_double::min",
        "body": "std::_double::min                var dMin = std::_double::min;        // => 2.225073858507e-308FL"
    },
    {
        "id": "92",
        "path": "Namespaces/std/Subspaces/_double/functions/ceil.md",
        "title": "std::_double::ceil(in double)",
        "body": "std::_double::ceil(in double)Requires ‘math.inc.ipng’ to be includedRounds up passed double value to next int valueArguments1.  in double: Number to round to next intReturns1.  out double: rounded up valueExample    function main (argv.() char) int{                var ceilVal = std::_double::ceil(1.5fl);        // => 2FL    }"
    },
    {
        "id": "93",
        "path": "Namespaces/std/Subspaces/_double/functions/cos.md",
        "title": "std::_double::cos(in double)",
        "body": "std::_double::cos(in double)Requires ‘math.inc.ipng’ to be includedCalculates cosine of passed doubleArguments1.  in double: Number to calc cosine ofReturns1.  out double: ResultExample    function main (argv.() char) int{                var cosine = std::_double::cos(0.0FL);        // => 1FL    }"
    },
    {
        "id": "94",
        "path": "Namespaces/std/Subspaces/_double/functions/exp.md",
        "title": "std::_double::exp(in double)",
        "body": "std::_double::exp(in double)Requires ‘math.inc.ipng’ to be includedCalculates e to the power of inArguments1.  in double: ExponentReturns1.  out double: ResultExample    function main (argv.() char) int{                var e_pow_1 = std::_double::exp(1.0FL);        // => 2.718281828459FL    }"
    },
    {
        "id": "95",
        "path": "Namespaces/std/Subspaces/_double/functions/exp2.md",
        "title": "std::_double::exp2(in double)",
        "body": "std::_double::exp2(in double)Requires ‘math.inc.ipng’ to be includedCalculates 2 to the power of inArguments1.  in double: ExponentReturns1.  out double: ResultExample    function main (argv.() char) int{                var two_pow_2 = std::_double::exp2(2.0FL);        // => 4FL    }"
    },
    {
        "id": "96",
        "path": "Namespaces/std/Subspaces/_double/functions/fabs.md",
        "title": "std::_double::fabs(in double)",
        "body": "std::_double::fabs(in double)Requires ‘math.inc.ipng’ to be includedReturns absolute value of passed numberArguments1.  in double: Number to get absolute value ofReturns1.  out double: ResultExample    function main (argv.() char) int{                var two_pow_2 = std::_double::fabs(-2.51FL);        // => -2.51FL    }"
    },
    {
        "id": "97",
        "path": "Namespaces/std/Subspaces/_double/functions/floor.md",
        "title": "std::_double::floor(in double)",
        "body": "std::_double::floor(in double)Requires ‘math.inc.ipng’ to be includedRounds down passed double value to next int valueArguments1.  in double: Number to round to next intReturns1.  out double: rounded down valueExample    function main (argv.() char) int{                var floorVal = std::_double::floor(2.5fl);        // => 2FL    }"
    },
    {
        "id": "98",
        "path": "Namespaces/std/Subspaces/_double/functions/fmod.md",
        "title": "std::_double::floor(in1 double, in2 double)",
        "body": "std::_double::floor(in1 double, in2 double)Requires ‘math.inc.ipng’ to be includedCalculates modulo of in1 to in2Arguments1.  in1 double: Number to calculate modulo of2.  in2 double: DivisorReturns1.  out double: ResultExample    function main (argv.() char) int{                var floorVal = std::_double::fmod(7FL, 3FL);        // => 1FL    }"
    },
    {
        "id": "99",
        "path": "Namespaces/std/Subspaces/_double/functions/isfinite.md",
        "title": "std::_double::isfinite(in double)",
        "body": "std::_double::isfinite(in double)Requires ‘math.inc.ipng’ to be includedCheck if passed number is finite (anything other than INFINITY or NAN)Arguments1.  in1 double: Number to checkReturns1.  out bool: true if number is finite, false if its notExample    function main (argv.() char) int{        // someFunc() returns some double value        var toCheck = someFunc();                if(std::_double::isfinte(toCheck)){            // do this        }else{            // check if toCheck is infinity            if(std::_double::isinf(toCheck)){                // ...            }else{                // check if toCheck is NAN                if(std::_double::isnan(toCheck)){                    // ...                }else{                    // ...                 }            }        }    }"
    },
    {
        "id": "100",
        "path": "Namespaces/std/Subspaces/_double/functions/isinf.md",
        "title": "std::_double::isinf(in double)",
        "body": "std::_double::isinf(in double)Requires ‘math.inc.ipng’ to be includedCheck if passed number is innfiniteArguments1.  in1 double: Number to checkReturns1.  out bool: true if number is infinite, false if its notExample    function main (argv.() char) int{        // someFunc() returns some double value        var toCheck = someFunc();                if(std::_double::isfinte(toCheck)){            // do this        }else{            // check if toCheck is infinity            if(std::_double::isinf(toCheck)){                // ...            }else{                // check if toCheck is NAN                if(std::_double::isnan(toCheck)){                    // ...                }else{                    // ...                 }            }        }    }"
    },
    {
        "id": "101",
        "path": "Namespaces/std/Subspaces/_double/functions/isnan.md",
        "title": "std::_double::isnan(in double)",
        "body": "std::_double::isnan(in double)Requires ‘math.inc.ipng’ to be includedCheck if passed number is nanArguments1.  in1 double: Number to checkReturns1.  out bool: true if number is nan, false if its notExample    function main (argv.() char) int{        // someFunc() returns some double value        var toCheck = someFunc();                if(std::_double::isfinte(toCheck)){            // do this        }else{            // check if toCheck is infinity            if(std::_double::isinf(toCheck)){                // ...            }else{                // check if toCheck is NAN                if(std::_double::isnan(toCheck)){                    // ...                }else{                    // ...                 }            }        }    }"
    },
    {
        "id": "102",
        "path": "Namespaces/std/Subspaces/_double/functions/log.md",
        "title": "std::_double::log(in double)",
        "body": "std::_double::log(in double)Requires ‘math.inc.ipng’ to be includedCalcuates base e logarithm of passed numberArguments1.  in double: Number to calculate log with base e fromReturns1.  out double: ResultExample    function main (argv.() char) int{                var log_e_of = std::_double::log(100FL);        // => 4.605170185988FL    }"
    },
    {
        "id": "103",
        "path": "Namespaces/std/Subspaces/_double/functions/log10.md",
        "title": "std::_double::log10(in double)",
        "body": "std::_double::log10(in double)Requires ‘math.inc.ipng’ to be includedCalcuates base 10 logarithm of passed numberArguments1.  in double: Number to calculate log with base 10 fromReturns1.  out double: ResultExample    function main (argv.() char) int{                var log_10 = std::_double::log10(100FL);        // => 2FL    }"
    },
    {
        "id": "104",
        "path": "Namespaces/std/Subspaces/_double/functions/log2.md",
        "title": "std::_double::log2(in double)",
        "body": "std::_double::log2(in double)Requires ‘math.inc.ipng’ to be includedCalcuates base 2 logarithm of passed numberArguments1.  in double: Number to calculate log with base 2 fromReturns1.  out double: ResultExample    function main (argv.() char) int{                var log_e_of = std::_double::log2(1024FL);        // => 10FL    }"
    },
    {
        "id": "105",
        "path": "Namespaces/std/Subspaces/_double/functions/pow.md",
        "title": "std::_double::pow(base double, exp double)",
        "body": "std::_double::pow(base double, exp double)Requires ‘math.inc.ipng’ to be includedCalculates power of base to expArguments1.  base double: Base number2.  exp double: ExponentReturns1.  out double: ResultExample    function main (argv.() char) int{                var log_e_of = std::_double::pow(2Fl, 10FL);        // => 1024FL    }"
    },
    {
        "id": "106",
        "path": "Namespaces/std/Subspaces/_double/functions/pscan.md",
        "title": "std::_double::pscan(in char, pos int)",
        "body": "std::_double::pscan(in char, pos int)Requires ‘math.inc.ipng’ to be includedParse double value from stringArguments1.  in char: String to parse double value from2.  pos int: Position inside string to start parsing from. If passed as    reference position will be set to first position after parsed valueReturns1.  out double: Parsed valueExample    function main (argv.() char) int{                var parsedD = std::_double::pscan(\"ich mag 1.23\", 8);        // => 1.23FL    }"
    },
    {
        "id": "107",
        "path": "Namespaces/std/Subspaces/_double/functions/sin.md",
        "title": "std::_double::sin(in double)",
        "body": "std::_double::sin(in double)Requires ‘math.inc.ipng’ to be includedCalculates sine of passed doubleArguments1.  in double: Number to calc sine ofReturns1.  out double: ResultExample    function main (argv.() char) int{                var cosine = std::_double::sin(0.0FL);        // => 0FL    }"
    },
    {
        "id": "108",
        "path": "Namespaces/std/Subspaces/_double/functions/sqrt.md",
        "title": "std::_double::sqrt(radicand double)",
        "body": "std::_double::sqrt(radicand double)Requires ‘math.inc.ipng’ to be includedCalculates squareroot of radicandArguments1.  radicand double: Number to calc squareroot ofReturns1.  out double: ResultExample    function main (argv.() char) int{                var cosine = std::_double::sqrt(4FL);        // => 2FL    }"
    },
    {
        "id": "109",
        "path": "Namespaces/std/Subspaces/_double/functions/tan.md",
        "title": "std::_double::sin(in double)",
        "body": "std::_double::sin(in double)Requires ‘math.inc.ipng’ to be includedCalculates tangent of passed doubleArguments1.  in double: Number to calc tangent ofReturns1.  out double: ResultExample    function main (argv.() char) int{                var cosine = std::_double::tan(0.0FL);        // => 0FL    }"
    },
    {
        "id": "110",
        "path": "Namespaces/std/Subspaces/_float/Constants/E.md",
        "title": "std::_float::E",
        "body": "std::_float::E    include (\"math.inc.ipng\");                var floatE = std::_float::E;        // => 2.718282F"
    },
    {
        "id": "111",
        "path": "Namespaces/std/Subspaces/_float/Constants/INFINITY.md",
        "title": "std::_float::INFINITY",
        "body": "std::_float::INFINITY    include (\"math.inc.ipng\");                var floatE = std::_float::INFINITY;        // => std::_float::INFINITY"
    },
    {
        "id": "112",
        "path": "Namespaces/std/Subspaces/_float/Constants/NAN.md",
        "title": "std::_float::NAN",
        "body": "std::_float::NAN    include (\"math.inc.ipng\");                var floatE = std::_float::NAN;        // => std::_float::NAN"
    },
    {
        "id": "113",
        "path": "Namespaces/std/Subspaces/_float/Constants/PI.md",
        "title": "std::_float::PI",
        "body": "std::_float::PI    include (\"math.inc.ipng\");                var q_t_PI = std::_float::PI;        // => 3.141593F"
    },
    {
        "id": "114",
        "path": "Namespaces/std/Subspaces/_float/Constants/max.md",
        "title": "std::_float::max",
        "body": "std::_float::max    include (\"math.inc.ipng\");                var dMax = std::_float::max;        // => 3.402823e+38F"
    },
    {
        "id": "115",
        "path": "Namespaces/std/Subspaces/_float/Constants/min.md",
        "title": "std::_float::min",
        "body": "std::_float::min    include (\"math.inc.ipng\");                var dMin = std::_float::min;        // => 1.175494e-38F"
    },
    {
        "id": "116",
        "path": "Namespaces/std/Subspaces/_float/functions/ceil.md",
        "title": "std::_float::ceil(in float) float",
        "body": "std::_float::ceil(in float) floatRequires ‘math.inc.ipng’ to be includedRounds up passed float value to next int valueArguments1.  in float: Number to round to next intReturns1.  out float: rounded up valueExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var ceilVal = std::_float::ceil(1.5f);        // => 2f    }"
    },
    {
        "id": "117",
        "path": "Namespaces/std/Subspaces/_float/functions/cos.md",
        "title": "std::_float::cos(in float) float",
        "body": "std::_float::cos(in float) floatRequires ‘math.inc.ipng’ to be includedCalculates cosine of passed floatArguments1.  in float: Number to calc cosine ofReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var cosine = std::_float::cos(0.0f);        // => 1f    }"
    },
    {
        "id": "118",
        "path": "Namespaces/std/Subspaces/_float/functions/exp.md",
        "title": "std::_float::exp(in float) float",
        "body": "std::_float::exp(in float) floatRequires ‘math.inc.ipng’ to be includedCalculates e to the power of inArguments1.  in float: ExponentReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var e_pow_1 = std::_float::exp(1.0f);        // => 2.718281828459f    }"
    },
    {
        "id": "119",
        "path": "Namespaces/std/Subspaces/_float/functions/exp2.md",
        "title": "std::_float::exp2(in float) float",
        "body": "std::_float::exp2(in float) floatRequires ‘math.inc.ipng’ to be includedCalculates 2 to the power of inArguments1.  in float: ExponentReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var two_pow_2 = std::_float::exp2(2.0f);        // => 4f    }"
    },
    {
        "id": "120",
        "path": "Namespaces/std/Subspaces/_float/functions/fabs.md",
        "title": "std::_float::fabs(in float) float",
        "body": "std::_float::fabs(in float) floatRequires ‘math.inc.ipng’ to be includedReturns absolute value of passed numberArguments1.  in float: Number to get absolute value ofReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var two_pow_2 = std::_float::fabs(-2.51f);        // => -2.51f    }"
    },
    {
        "id": "121",
        "path": "Namespaces/std/Subspaces/_float/functions/floor.md",
        "title": "std::_float::floor(in float) float",
        "body": "std::_float::floor(in float) floatRequires ‘math.inc.ipng’ to be includedRounds down passed float value to next int valueArguments1.  in float: Number to round to next intReturns1.  out float: rounded down valueExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var floorVal = std::_float::floor(2.5fl);        // => 2f    }"
    },
    {
        "id": "122",
        "path": "Namespaces/std/Subspaces/_float/functions/fmod.md",
        "title": "std::_float::floor(in1 float, in2 float) float",
        "body": "std::_float::floor(in1 float, in2 float) floatRequires ‘math.inc.ipng’ to be includedCalculates modulo of in1 to in2Arguments1.  in1 float: Number to calculate modulo of2.  in2 float: DivisorReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var floorVal = std::_float::fmod(7f, 3f);        // => 1f    }"
    },
    {
        "id": "123",
        "path": "Namespaces/std/Subspaces/_float/functions/isfinite.md",
        "title": "std::_float::isfinite(in float) bool",
        "body": "std::_float::isfinite(in float) boolRequires ‘math.inc.ipng’ to be includedCheck if passed number is finite (anything other than INFINITY or NAN)Arguments1.  in1 float: Number to checkReturns1.  out bool: true if number is finite, false if its notExample    include (\"math.inc.ipng\");    function main (argv.() char) int{        // someFunc() returns some float value        var toCheck = someFunc();                if(std::_float::isfinte(toCheck)){            // do this        }else{            // check if toCheck is infinity            if(std::_float::isinf(toCheck)){                // ...            }else{                // check if toCheck is NAN                if(std::_float::isnan(toCheck)){                    // ...                }else{                    // ...                 }            }        }    }"
    },
    {
        "id": "124",
        "path": "Namespaces/std/Subspaces/_float/functions/isinf.md",
        "title": "std::_float::isinf(in float) bool",
        "body": "std::_float::isinf(in float) boolRequires ‘math.inc.ipng’ to be includedCheck if passed number is innfiniteArguments1.  in1 float: Number to checkReturns1.  out bool: true if number is infinite, false if its notExample    include (\"math.inc.ipng\");    function main (argv.() char) int{        // someFunc() returns some float value        var toCheck = someFunc();                if(std::_float::isfinte(toCheck)){            // do this        }else{            // check if toCheck is infinity            if(std::_float::isinf(toCheck)){                // ...            }else{                // check if toCheck is NAN                if(std::_float::isnan(toCheck)){                    // ...                }else{                    // ...                 }            }        }    }"
    },
    {
        "id": "125",
        "path": "Namespaces/std/Subspaces/_float/functions/isnan.md",
        "title": "std::_float::isnan(in float) bool",
        "body": "std::_float::isnan(in float) boolRequires ‘math.inc.ipng’ to be includedCheck if passed number is nanArguments1.  in1 float: Number to checkReturns1.  out bool: true if number is nan, false if its notExample    include (\"math.inc.ipng\");    function main (argv.() char) int{        // someFunc() returns some float value        var toCheck = someFunc();                if(std::_float::isfinte(toCheck)){            // do this        }else{            // check if toCheck is infinity            if(std::_float::isinf(toCheck)){                // ...            }else{                // check if toCheck is NAN                if(std::_float::isnan(toCheck)){                    // ...                }else{                    // ...                 }            }        }    }"
    },
    {
        "id": "126",
        "path": "Namespaces/std/Subspaces/_float/functions/log.md",
        "title": "std::_float::log(in float) float",
        "body": "std::_float::log(in float) floatRequires ‘math.inc.ipng’ to be includedCalcuates base e logarithm of passed numberArguments1.  in float: Number to calculate log with base e fromReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var log_e_of = std::_float::log(100f);        // => 4.605170185988f    }"
    },
    {
        "id": "127",
        "path": "Namespaces/std/Subspaces/_float/functions/log10.md",
        "title": "std::_float::log10(in float) float",
        "body": "std::_float::log10(in float) floatRequires ‘math.inc.ipng’ to be includedCalcuates base 10 logarithm of passed numberArguments1.  in float: Number to calculate log with base 10 fromReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var log_10 = std::_float::log10(100f);        // => 2f    }"
    },
    {
        "id": "128",
        "path": "Namespaces/std/Subspaces/_float/functions/log2.md",
        "title": "std::_float::log2(in float) float",
        "body": "std::_float::log2(in float) floatRequires ‘math.inc.ipng’ to be includedCalcuates base 2 logarithm of passed numberArguments1.  in float: Number to calculate log with base 2 fromReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var log_e_of = std::_float::log2(1024f);        // => 10f    }"
    },
    {
        "id": "129",
        "path": "Namespaces/std/Subspaces/_float/functions/pow.md",
        "title": "std::_float::pow(base float, exp float) float",
        "body": "std::_float::pow(base float, exp float) floatRequires ‘math.inc.ipng’ to be includedCalculates power of base to expArguments1.  base float: Base number2.  exp float: ExponentReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var log_e_of = std::_float::pow(2f, 10f);        // => 1024f    }"
    },
    {
        "id": "130",
        "path": "Namespaces/std/Subspaces/_float/functions/pscan.md",
        "title": "std::_float::pscan(in char, pos int) float",
        "body": "std::_float::pscan(in char, pos int) floatRequires ‘math.inc.ipng’ to be includedParse float value from stringArguments1.  in char: String to parse float value from2.  pos int: Position inside string to start parsing from. If passed as    reference position will be set to first position after parsed valueReturns1.  out float: Parsed valueExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var parsedD = std::_float::pscan(\"ich mag 1.23\", 8);        // => 1.23f    }"
    },
    {
        "id": "131",
        "path": "Namespaces/std/Subspaces/_float/functions/sin.md",
        "title": "std::_float::sin(in float) float",
        "body": "std::_float::sin(in float) floatRequires ‘math.inc.ipng’ to be includedCalculates sine of passed floatArguments1.  in float: Number to calc sine ofReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var sine = std::_float::sin(0.0f);        // => 0f    }"
    },
    {
        "id": "132",
        "path": "Namespaces/std/Subspaces/_float/functions/sqrt.md",
        "title": "std::_float::sqrt(radicand float) float",
        "body": "std::_float::sqrt(radicand float) floatRequires ‘math.inc.ipng’ to be includedCalculates squareroot of radicandArguments1.  radicand float: Number to calc squareroot ofReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var cosine = std::_float::sqrt(4f);        // => 2f    }"
    },
    {
        "id": "133",
        "path": "Namespaces/std/Subspaces/_float/functions/tan.md",
        "title": "std::_float::tan(in float) float",
        "body": "std::_float::tan(in float) floatRequires ‘math.inc.ipng’ to be includedCalculates tangent of passed floatArguments1.  in float: Number to calc tangent ofReturns1.  out float: ResultExample    include (\"math.inc.ipng\");    function main (argv.() char) int{                var tangent = std::_float::tan(0.0f);        // => 0f    }"
    },
    {
        "id": "134",
        "path": "Namespaces/std/Subspaces/_int/Constants/max.md",
        "title": "std::_int::max",
        "body": "std::_int::max    include (\"math.inc.ipng\");    var maxInt = std::_int::max;    // => 2147483647"
    },
    {
        "id": "135",
        "path": "Namespaces/std/Subspaces/_int/Constants/min.md",
        "title": "std::_int::min",
        "body": "std::_int::min    include (\"math.inc.ipng\");    var minInt = std::_int::min;    // => -2147483648"
    },
    {
        "id": "136",
        "path": "Namespaces/std/Subspaces/_int/Functions/dec.md",
        "title": "std::_int::dec(src int) char",
        "body": "std::_int::dec(src int) charReturns passed number in string formatArguments1.  src int : src to get decimal representation fromReturns-   out char : decimal representation as stringExample    var src int = 123;    // get decimal representation as string    var decStr char = std::_int::dec(src);    // => \"123\"RelatedUses  [[]]"
    },
    {
        "id": "137",
        "path": "Namespaces/std/Subspaces/_int/Functions/hex.md",
        "title": "std::_int::hex(src int) char",
        "body": "std::_int::hex(src int) charReturns hex value of passed number as stringArguments1.  src int : src to get hexadecimal representation fromReturns-   out char : hexadecimal representation as stringExample    var src int = 123;    // get hexdec as string    var hexStr char = std::_int::hex(src);    // => \"7B\"RelatedUses  [[]]"
    },
    {
        "id": "138",
        "path": "Namespaces/std/Subspaces/_int/Functions/pscand.md",
        "title": "std::_int::pscand(src char, pos int) int",
        "body": "std::_int::pscand(src char, pos int) intParses integer from string starting at given positionArguments1.  src char: Source string to parse int from2.  pos int: Position inside string to start parsing from. If passed as    reference position will be set to first position after parsed valueReturns-   out int: Parsed int valueExample    var src char = \"Hello i am 25\";    // parse hexdec to int    var parsedVal int = std::_int::pscand(src, 11);    // => 25RelatedUses  [[]]"
    },
    {
        "id": "139",
        "path": "Namespaces/std/Subspaces/_int/Functions/pscanx.md",
        "title": "std::_int::pscand(src char, pos int) int",
        "body": "std::_int::pscand(src char, pos int) intParses integer in hex format from string starting at given positionArguments1.  src char: Source string to parse int from2.  pos int: Position inside string to start parsing from. If passed as    reference position will be set to first position after parsed valueReturns-   out int: Parsed int valueExample    // 19 is hex for 25    var src char = \"Hello i am 19\";    // parse hexdec to int    var parsedVal int = std::_int::pscand(src, 11);    // => 25RelatedUses  [[]]"
    },
    {
        "id": "140",
        "path": "Namespaces/std/Subspaces/_long/Constants/max.md",
        "title": "std::_long::max",
        "body": "std::_long::max    include (\"math.inc.ipng\");    var maxlong = std::_long::max;    // => 9223372036854775807L"
    },
    {
        "id": "141",
        "path": "Namespaces/std/Subspaces/_long/Constants/min.md",
        "title": "std::_long::min",
        "body": "std::_long::min    include (\"math.inc.ipng\");    var maxlong = std::_long::max;    // => -9223372036854775808L"
    },
    {
        "id": "142",
        "path": "Namespaces/std/Subspaces/_long/Functions/dec.md",
        "title": "std::_long::dec(src long) char",
        "body": "std::_long::dec(src long) charArguments1.  src long : src to get decimal representation fromReturns-   out char : decimal representation as stringExample    var src long = 123;    // get decimal representation as string    var decStr char = std::_long::dec(src)RelatedUses  [[]]"
    },
    {
        "id": "143",
        "path": "Namespaces/std/Subspaces/_long/Functions/hex.md",
        "title": "std::_long::hex(src long) char",
        "body": "std::_long::hex(src long) charArguments1.  src long : src to get hexadecimal representation fromReturns-   out char : hexadecimal representation as stringExample    var src long = 123;    // get hexdec as string    var hexStr char = std::_long::hex(src)RelatedUses  [[]]"
    },
    {
        "id": "144",
        "path": "Namespaces/std/Subspaces/_long/Functions/pscand.md",
        "title": "std::_long::pscand(src char, pos int) long",
        "body": "std::_long::pscand(src char, pos int) longParses long from string starting at given positionArguments1.  src char: Source string to parse long from2.  pos int: Position inside string to start parsing from. If passed as    reference position will be set to first position after parsed valueReturns-   out long: Parsed long valueExample    var src char = \"Hello i am 25\";    // parse hexdec to long    var parsedVal long = std::_long::pscand(src, 11);    // => 25RelatedUses  [[]]"
    },
    {
        "id": "145",
        "path": "Namespaces/std/Subspaces/_long/Functions/pscanx.md",
        "title": "std::_long::pscand(src char, pos int) long",
        "body": "std::_long::pscand(src char, pos int) longParses long in hex format from string starting at given positionArguments1.  src char: Source string to parse long from2.  pos int: Position inside string to start parsing from. If passed as    reference position will be set to first position after parsed valueReturns-   out long: Parsed long valueExample    // 19 is hex for 25    var src char = \"Hello i am 19\";    // parse hexdec to long    var parsedVal long = std::_long::pscand(src, 11);    // => 25RelatedUses  [[]]"
    },
    {
        "id": "146",
        "path": "Namespaces/std/Subspaces/_uint/Constants/max.md",
        "title": "std::_uint::max",
        "body": "std::_uint::max    include (\"math.inc.ipng\");    var maxUInt = std::_uint::max;    // => 4294967295U"
    },
    {
        "id": "147",
        "path": "Namespaces/std/Subspaces/_uint/Constants/min.md",
        "title": "std::_uint::min",
        "body": "std::_uint::min    include (\"math.inc.ipng\");    var minInt = std::_uint::min;    // => 0U;"
    },
    {
        "id": "148",
        "path": "Namespaces/std/Subspaces/_uint/Functions/dec.md",
        "title": "std::_uint::dec(src uint) char",
        "body": "std::_uint::dec(src uint) charReturns passed number in string formatArguments1.  src uint : src to get decimal representation fromReturns-   out char : decimal representation as stringExample    var src uint = 123U;    // get decimal representation as string    var decStr char = std::_uint::dec(src);    // => \"123\"RelatedUses  [[]]"
    },
    {
        "id": "149",
        "path": "Namespaces/std/Subspaces/_uint/Functions/hex.md",
        "title": "std::_uint::hex(src int) char",
        "body": "std::_uint::hex(src int) charReturns hex value of passed number as stringArguments1.  src int : src to get hexadecimal representation fromReturns-   out char : hexadecimal representation as stringExample    var src int = 123;    // get hexdec as string    var hexStr char = std::_uint::hex(src);    // => \"7B\"RelatedUses  [[]]"
    },
    {
        "id": "150",
        "path": "Namespaces/std/Subspaces/_uint/Functions/pscand.md",
        "title": "std::_uint::pscand(src char, pos int) int",
        "body": "std::_uint::pscand(src char, pos int) intParses uint from string starting at given positionArguments1.  src char: Source string to parse uint from2.  pos int: Position inside string to start parsing from. If passed as    reference position will be set to first position after parsed valueReturns-   out int: Parsed uint valueExample    var src char = \"Hello i am 25\";    // parse hexdec to uint    var parsedVal uint = std::_uint::pscand(src, 11);    // => 25RelatedUses  [[]]"
    },
    {
        "id": "151",
        "path": "Namespaces/std/Subspaces/_uint/Functions/pscanx.md",
        "title": "std::_uint::pscand(src char, pos int) uint",
        "body": "std::_uint::pscand(src char, pos int) uintParses uint in hex format from string starting at given positionArguments1.  src char: Source string to parse int from2.  pos int: Position inside string to start parsing from. If passed as    reference position will be set to first position after parsed valueReturns-   out int: Parsed int valueExample    // 19 is hex for 25    var src char = \"Hello i am 19\";    // parse hexdec to uint    var parsedVal uint = std::_uint::pscand(src, 11);    // => 25RelatedUses  [[]]"
    },
    {
        "id": "152",
        "path": "Namespaces/std/Subspaces/_ulong/Constants/max.md",
        "title": "std::_ulong::max",
        "body": "std::_ulong::max    include (\"math.inc.ipng\");    var maxulong = std::_ulong::max;    // => 18446744073709551615UL"
    },
    {
        "id": "153",
        "path": "Namespaces/std/Subspaces/_ulong/Constants/min.md",
        "title": "std::_ulong::min",
        "body": "std::_ulong::min    include (\"math.inc.ipng\");    var maxulong = std::_ulong::max;    // => 0UL"
    },
    {
        "id": "154",
        "path": "Namespaces/std/Subspaces/_ulong/Functions/dec.md",
        "title": "std::_ulong::dec(src ulong) char",
        "body": "std::_ulong::dec(src ulong) charArguments1.  src ulong : src to get decimal representation fromReturns-   out char : decimal representation as stringExample    var src ulong = 123;    // get decimal representation as string    var decStr char = std::_ulong::dec(src)RelatedUses  [[]]"
    },
    {
        "id": "155",
        "path": "Namespaces/std/Subspaces/_ulong/Functions/hex.md",
        "title": "std::_ulong::hex(src ulong) char",
        "body": "std::_ulong::hex(src ulong) charArguments1.  src ulong : src to get hexadecimal representation fromReturns-   out char : hexadecimal representation as stringExample    var src ulong = 123;    // get hexdec as string    var hexStr char = std::_ulong::hex(src)RelatedUses  [[]]"
    },
    {
        "id": "156",
        "path": "Namespaces/std/Subspaces/_ulong/Functions/pscand.md",
        "title": "std::_ulong::pscand(src char, pos int) ulong",
        "body": "std::_ulong::pscand(src char, pos int) ulongParses ulong from string starting at given positionArguments1.  src char: Source string to parse ulong from2.  pos int: Position inside string to start parsing from. If passed as    reference position will be set to first position after parsed valueReturns-   out ulong: Parsed ulong valueExample    var src char = \"Hello i am 25\";    // parse hexdec to ulong    var parsedVal ulong = std::_ulong::pscand(src, 11);    // => 25RelatedUses  [[]]"
    },
    {
        "id": "157",
        "path": "Namespaces/std/Subspaces/_ulong/Functions/pscanx.md",
        "title": "std::_ulong::pscand(src char, pos int) ulong",
        "body": "std::_ulong::pscand(src char, pos int) ulongParses ulong in hex format from string starting at given positionArguments1.  src char: Source string to parse ulong from2.  pos int: Position inside string to start parsing from. If passed as    reference position will be set to first position after parsed valueReturns-   out ulong: Parsed ulong valueExample    // 19 is hex for 25    var src char = \"Hello i am 19\";    // parse hexdec to ulong    var parsedVal ulong = std::_ulong::pscand(src, 11);    // => 25RelatedUses  [[]]"
    },
    {
        "id": "158",
        "path": "Namespaces/std/std_constants.md",
        "title": "std Constants",
        "body": "std Constants-   std::BDIR-   std::EXECstd Subspace Constants-   std::__pel-   std::__type"
    },
    {
        "id": "159",
        "path": "Namespaces/std/std_functions.md",
        "title": "std Functions",
        "body": "std FunctionsTrees/Paths-   std::tree1d(…)-   std::partofData transform functions-   std::pack(toPack any) byte-   std::unpack(toUnpack byte, pos int)Time related functions-   std::now() long-   std::time() long-   std::time_date_string() char-   std::time_tag_string() char-   std::sleep(time ulong)-   std::gmtime(time long) cal-   std::localtime(time long) cal-   std::cal2str(date cal) char-   std::cal2time(date cal) long-   std::cal2clock(date cal) long-   std::mktime(date cal) longRuntime checks/queries-   std::typeof(check any) int-   std::class_name(obj any) char-   std::cast(castType __type, obj2Cast any) {casted input}-   std::check_cast(castType __type, obj2Cast any) bool-   std::compare(typeOfObj __type, obj1 any, obj2 any) int-   std::equal(obj1 any, obj2 any) bool-   std::refeq(&ref1 any, &ref2 any) bool-   std::assert({bool expression}) {assertion error}-   std::exit(retCode int)-   std::getenv(…)-   std::getcwd() char-   std::chdir(folderPath char)Random-   std::seed(seedToSet uint)-   std::random() uintEvents-   std::event_enable(…)-   std::event_disable(…)-   std::event_wait(…)Print/Output related-   std::display(obj any) char-   std::form(str char, obj any) char-   std::abort(msg char)Input-   std::gets() char-   std::parse_const(toParse char, pos int, &obj any) boolBit-/Byte-Manipulation-   std::getbit(byCh byte, pos int) bool-   std::swap_bit(toSwap byte) byte-   std::swap_byte(toSwap byte) byte-   std::sign(toSign byte) int-   std::maskbit(byCh byte) intChar-/String-Manipulation-   std::trunc(byChain byte) byte-   std::regsrc(…)-   std::regcmp(…)Process Management-   std::getpid() int-   std::proc_running(somePID int) bool-   std::proc_terminate(somePID)File/Directory Management-   std::FileRead(filePath char) byte-   std::FileWrite(filename char, buf byte) bool-   std::stat(filePath char) stat-   std::ISDIR(in stat) bool-   std::ISREG(in stat) bool-   std::CreateDirTree(startDir char, dirTree.[char] any)-   std::RemoveDirTree(startDir char)-   std::GetDirTreeSize(startDir char) long-   std::printFileSize(size long) char"
    },
    {
        "id": "160",
        "path": "Namespaces/std/std_subspace.md",
        "title": "std Subspace",
        "body": "std Subspace_byteFunctions-   std::_byte::alloc(size int) byte-   std::_byte::pscanx(in char, pos int) byte_charFunctions-   std::_char::alloc(size int) char_intFunctions-   std::_int::dec(src int) char-   std::_int::hex(src int) char-   std::_int::pscand(src char, pos int) int-   std::_int::pscanx(src char, pos int) intConstants-   std::_int::max-   std::_int::min_uintFunctions-   std::_uint::dec(src uint) char-   std::_uint::hex(src uint) char-   std::_uint::pscand(src char, pos int) uint-   std::_uint::pscanx(src char, pos int) uintConstants-   std::_uint::max-   std::_uint::max_longFunctions-   std::_long::dec(src long) char-   std::_long::hex(src long) char-   std::_long::pscand(src char, pos int) long-   std::_long::pscanx(src char, pos int) longConstants-   std::_long::max-   std::_long::min_ulongFunctions-   std::_ulong::dec(src ulong) char-   std::_ulong::hex(src ulong) char-   std::_ulong::pscand(src char, pos int) ulong-   std::_ulong::pscanx(src char, pos int) ulongConstants-   std::_ulong::max-   std::_ulong::min_floatFunctions-   std::_float::ceil(in float) float-   std::_float::cos(in float) float-   std::_float::exp(in float) float-   std::_float::exp2(in float) float-   std::_float::fabs(in float) float-   std::_float::floor(in float) float-   std::_float::fmod(in1 float, in2 float) float-   std::_float::isfinite(in float) bool-   std::_float::isinf(in float) bool-   std::_float::isnan(in float) bool-   std::_float::log(in float) bool-   std::_float::log10(in float) bool-   std::_float::log2(in float) bool-   std::_float::pow(base float, exp float) float-   std::_float::pscan(in char, pos int) float-   std::_float::sin(in float) float-   std::_float::sqrt(radicand float) float-   std::_float::tan(in float) floatConstants-   std::_float::max-   std::_float::min-   std::_float::E-   std::_float::PI-   std::_float::INFINITY-   std::_float::NAN_doubleFunctions-   std::_double::ceil(in double) double-   std::_double::cos(in double) double-   std::_double::exp(in double) double-   std::_double::exp2(in double) double-   std::_double::fabs(in double) double-   std::_double::floor(in double) double-   std::_double::fmod(in1 double, in2 double) double-   std::_double::isfinite(in double) bool-   std::_double::isinf(in double) bool-   std::_double::isnan(in double) bool-   std::_double::log(in double) bool-   std::_double::log10(in double) bool-   std::_double::log2(in double) bool-   std::_double::pow(base double, exp double) double-   std::_double::pscan(in char, pos int) double-   std::_double::sin(in double) double-   std::_double::sqrt(radicand double) double-   std::_double::tan(in double) doubleConstants-   std::_double::max-   std::_double::min-   std::_double::E-   std::_double::PI-   std::_double::INFINITY-   std::_double::NAN__pelConstants-   std::__pel__typeConstants-   std::__typeNetFunctions-   std::Net::gethostbyaddr(addr byte) hostEntry-   std::Net::gethostbyname(name char) hostEntryStructs-   Host Entry StructureBase64Functions-   std::Base64::Decode(in char) byte-   std::Base64::Encode(in byte) charBase64URLFunctions-   std::Base64URL::Decode(in char) byte-   std::Base64URL::Encode(in byte) char"
    },
    {
        "id": "161",
        "path": "Namespaces/utf8/constants/tabISOtoUTF8.md",
        "title": "ISO to UTF8 table",
        "body": "ISO to UTF8 table    var tabISOtoUTF8.[] char    {        .[128] = <E282AC>;        .[129] = <EFBFBD>;        .[130] = <E2809A>;        .[131] = <C692>;        .[132] = <E2809E>;        .[133] = <E280A6>;        .[134] = <E280A0>;        .[135] = <E280A1>;        .[136] = <CB86>;        .[137] = <E280B0>;        .[138] = <C5A0>;        .[139] = <E280B9>;        .[140] = <C592>;        .[141] = <EFBFBD>;        .[142] = <C5BD>;        .[143] = <EFBFBD>;        .[144] = <EFBFBD>;        .[145] = <E28098>;        .[146] = <E28099>;        .[147] = <E2809C>;        .[148] = <E2809D>;        .[149] = <E280A2>;        .[150] = <E28093>;        .[151] = <E28094>;        .[152] = <CB9C>;        .[153] = <E284A2>;        .[154] = <C5A1>;        .[155] = <E280BA>;        .[156] = <C593>;        .[157] = <EFBFBD>;        .[158] = <C5BE>;        .[159] = <C5B8>;        .[160] = <C2A0>;        .[161] = <C2A1>;        .[162] = <C2A2>;        .[163] = <C2A3>;        .[164] = <C2A4>;        .[165] = <C2A5>;        .[166] = <C2A6>;        .[167] = <C2A7>;        .[168] = <C2A8>;        .[169] = <C2A9>;        .[170] = <C2AA>;        .[171] = <C2AB>;        .[172] = <C2AC>;        .[173] = <C2AD>;        .[174] = <C2AE>;        .[175] = <C2AF>;        .[176] = <C2B0>;        .[177] = <C2B1>;        .[178] = <C2B2>;        .[179] = <C2B3>;        .[180] = <C2B4>;        .[181] = <C2B5>;        .[182] = <C2B6>;        .[183] = <C2B7>;        .[184] = <C2B8>;        .[185] = <C2B9>;        .[186] = <C2BA>;        .[187] = <C2BB>;        .[188] = <C2BC>;        .[189] = <C2BD>;        .[190] = <C2BE>;        .[191] = <C2BF>;        .[192] = <C380>;        .[193] = <C381>;        .[194] = <C382>;        .[195] = <C383>;        .[196] = <C384>;        .[197] = <C385>;        .[198] = <C386>;        .[199] = <C387>;        .[200] = <C388>;        .[201] = <C389>;        .[202] = <C38A>;        .[203] = <C38B>;        .[204] = <C38C>;        .[205] = <C38D>;        .[206] = <C38E>;        .[207] = <C38F>;        .[208] = <C390>;        .[209] = <C391>;        .[210] = <C392>;        .[211] = <C393>;        .[212] = <C394>;        .[213] = <C395>;        .[214] = <C396>;        .[215] = <C397>;        .[216] = <C398>;        .[217] = <C399>;        .[218] = <C39A>;        .[219] = <C39B>;        .[220] = <C39C>;        .[221] = <C39D>;        .[222] = <C39E>;        .[223] = <C39F>;        .[224] = <C3A0>;        .[225] = <C3A1>;        .[226] = <C3A2>;        .[227] = <C3A3>;        .[228] = <C3A4>;        .[229] = <C3A5>;        .[230] = <C3A6>;        .[231] = <C3A7>;        .[232] = <C3A8>;        .[233] = <C3A9>;        .[234] = <C3AA>;        .[235] = <C3AB>;        .[236] = <C3AC>;        .[237] = <C3AD>;        .[238] = <C3AE>;        .[239] = <C3AF>;        .[240] = <C3B0>;        .[241] = <C3B1>;        .[242] = <C3B2>;        .[243] = <C3B3>;        .[244] = <C3B4>;        .[245] = <C3B5>;        .[246] = <C3B6>;        .[247] = <C3B7>;        .[248] = <C3B8>;        .[249] = <C3B9>;        .[250] = <C3BA>;        .[251] = <C3BB>;        .[252] = <C3BC>;        .[253] = <C3BD>;        .[254] = <C3BE>;        .[255] = <C3BF>;    };"
    },
    {
        "id": "162",
        "path": "Namespaces/utf8/constants/tabUTF8toISO.md",
        "title": "UTF8 to ISO table",
        "body": "UTF8 to ISO table    var tabUTF8toISO.[int] any    {    //    UTF-8 Bytes   CP1252 Dec    //    ----------    ------------        .[0xe2].[0x82].[0xac]    = 0x80;        .[0xef].[0xbf].[0xbd]    = 0x81;        .[0xe2].[0x80].[0x9a]    = 0x82;        .[0xc6].[0x92]    = 0x83;        .[0xe2].[0x80].[0x9e]    = 0x84;        .[0xe2].[0x80].[0xa6]    = 0x85;        .[0xe2].[0x80].[0xa0]    = 0x86;        .[0xe2].[0x80].[0xa1]    = 0x87;        .[0xcb].[0x86]    = 0x88;        .[0xe2].[0x80].[0xb0]    = 0x89;        .[0xc5].[0xa0]    = 0x8A;        .[0xe2].[0x80].[0xb9]    = 0x8B;        .[0xc5].[0x92]    = 0x8C;        .[0xef].[0xbf].[0xbd]    = 0x8D;        .[0xc5].[0xbd]    = 0x8E;        .[0xef].[0xbf].[0xbd]    = 0x8F;        .[0xef].[0xbf].[0xbd]    = 0x90;        .[0xe2].[0x80].[0x98]    = 0x91;        .[0xe2].[0x80].[0x99]    = 0x92;        .[0xe2].[0x80].[0x9c]    = 0x93;        .[0xe2].[0x80].[0x9d]    = 0x94;        .[0xe2].[0x80].[0xa2]    = 0x95;        .[0xe2].[0x80].[0x93]    = 0x96;        .[0xe2].[0x80].[0x94]    = 0x97;        .[0xcb].[0x9c]    = 0x98;        .[0xe2].[0x84].[0xa2]    = 0x99;        .[0xc5].[0xa1]    = 0x9A;        .[0xe2].[0x80].[0xba]    = 0x9B;        .[0xc5].[0x93]    = 0x9C;        .[0xef].[0xbf].[0xbd]    = 0x9D;        .[0xc5].[0xbe]    = 0x9E;        .[0xc5].[0xb8]    = 0x9F;        .[0xc2].[0xa0]    = 0xA0;        .[0xc2].[0xa1]    = 0xA1;        .[0xc2].[0xa2]    = 0xA2;        .[0xc2].[0xa3]    = 0xA3;        .[0xc2].[0xa4]    = 0xA4;        .[0xc2].[0xa5]    = 0xA5;        .[0xc2].[0xa6]    = 0xA6;        .[0xc2].[0xa7]    = 0xA7;        .[0xc2].[0xa8]    = 0xA8;        .[0xc2].[0xa9]    = 0xA9;        .[0xc2].[0xaa]    = 0xAA;        .[0xc2].[0xab]    = 0xAB;        .[0xc2].[0xac]    = 0xAC;        .[0xc2].[0xad]    = 0xAD;        .[0xc2].[0xae]    = 0xAE;        .[0xc2].[0xaf]    = 0xAF;        .[0xc2].[0xb0]    = 0xB0;        .[0xc2].[0xb1]    = 0xB1;        .[0xc2].[0xb2]    = 0xB2;        .[0xc2].[0xb3]    = 0xB3;        .[0xc2].[0xb4]    = 0xB4;        .[0xc2].[0xb5]    = 0xB5;        .[0xc2].[0xb6]    = 0xB6;        .[0xc2].[0xb7]    = 0xB7;        .[0xc2].[0xb8]    = 0xB8;        .[0xc2].[0xb9]    = 0xB9;        .[0xc2].[0xba]    = 0xBA;        .[0xc2].[0xbb]    = 0xBB;        .[0xc2].[0xbc]    = 0xBC;        .[0xc2].[0xbd]    = 0xBD;        .[0xc2].[0xbe]    = 0xBE;        .[0xc2].[0xbf]    = 0xBF;        .[0xc3].[0x80]    = 0xC0;        .[0xc3].[0x81]    = 0xC1;        .[0xc3].[0x82]    = 0xC2;        .[0xc3].[0x83]    = 0xC3;        .[0xc3].[0x84]    = 0xC4;        .[0xc3].[0x85]    = 0xC5;        .[0xc3].[0x86]    = 0xC6;        .[0xc3].[0x87]    = 0xC7;        .[0xc3].[0x88]    = 0xC8;        .[0xc3].[0x89]    = 0xC9;        .[0xc3].[0x8a]    = 0xCA;        .[0xc3].[0x8b]    = 0xCB;        .[0xc3].[0x8c]    = 0xCC;        .[0xc3].[0x8d]    = 0xCD;        .[0xc3].[0x8e]    = 0xCE;        .[0xc3].[0x8f]    = 0xCF;        .[0xc3].[0x90]    = 0xD0;        .[0xc3].[0x91]    = 0xD1;        .[0xc3].[0x92]    = 0xD2;        .[0xc3].[0x93]    = 0xD3;        .[0xc3].[0x94]    = 0xD4;        .[0xc3].[0x95]    = 0xD5;        .[0xc3].[0x96]    = 0xD6;        .[0xc3].[0x97]    = 0xD7;        .[0xc3].[0x98]    = 0xD8;        .[0xc3].[0x99]    = 0xD9;        .[0xc3].[0x9a]    = 0xDA;        .[0xc3].[0x9b]    = 0xDB;        .[0xc3].[0x9c]    = 0xDC;        .[0xc3].[0x9d]    = 0xDD;        .[0xc3].[0x9e]    = 0xDE;        .[0xc3].[0x9f]    = 0xDF;        .[0xc3].[0xa0]    = 0xE0;        .[0xc3].[0xa1]    = 0xE1;        .[0xc3].[0xa2]    = 0xE2;        .[0xc3].[0xa3]    = 0xE3;        .[0xc3].[0xa4]    = 0xE4;        .[0xc3].[0xa5]    = 0xE5;        .[0xc3].[0xa6]    = 0xE6;        .[0xc3].[0xa7]    = 0xE7;        .[0xc3].[0xa8]    = 0xE8;        .[0xc3].[0xa9]    = 0xE9;        .[0xc3].[0xaa]    = 0xEA;        .[0xc3].[0xab]    = 0xEB;        .[0xc3].[0xac]    = 0xEC;        .[0xc3].[0xad]    = 0xED;        .[0xc3].[0xae]    = 0xEE;        .[0xc3].[0xaf]    = 0xEF;        .[0xc3].[0xb0]    = 0xF0;        .[0xc3].[0xb1]    = 0xF1;        .[0xc3].[0xb2]    = 0xF2;        .[0xc3].[0xb3]    = 0xF3;        .[0xc3].[0xb4]    = 0xF4;        .[0xc3].[0xb5]    = 0xF5;        .[0xc3].[0xb6]    = 0xF6;        .[0xc3].[0xb7]    = 0xF7;        .[0xc3].[0xb8]    = 0xF8;        .[0xc3].[0xb9]    = 0xF9;        .[0xc3].[0xba]    = 0xFA;        .[0xc3].[0xbb]    = 0xFB;        .[0xc3].[0xbc]    = 0xFC;        .[0xc3].[0xbd]    = 0xFD;        .[0xc3].[0xbe]    = 0xFE;        .[0xc3].[0xbf]    = 0xFF;    };"
    },
    {
        "id": "163",
        "path": "Namespaces/utf8/functions/convISOtoUTF8.md",
        "title": "UTF8::convUTF8toISO(in char, pos int = 0)",
        "body": "UTF8::convUTF8toISO(in char, pos int = 0)Converts UTF8 encoded string to ISO-8859-1Needs ‘utf8.inc.ipng’ to be includedArguments1.  in char: String to convert encoding of2.  pos int: position in string to start converting from. if omitted    conversion starts at position 0Returns1.  out char: converted string in ISO formatExample    include(\"utf8.inc.ipng\");    function main (argv.() char) int{        var utfString = \"Süße Eichhörnchen kosten viele €\";        // ommition pos sets it to 0 by default        var isoString = UTF8::convUTF8toISO(utfString);    }"
    },
    {
        "id": "164",
        "path": "Namespaces/utf8/functions/convUTF8toISO.md",
        "title": "UTF8::convUTF8toISO(in char, pos int = 0)",
        "body": "UTF8::convUTF8toISO(in char, pos int = 0)Converts UTF8 encoded string to ISO-8859-1Needs ‘utf8.inc.ipng’ to be includedArguments1.  in char: String to convert encoding of2.  pos int: position in string to start converting from. if omitted    conversion starts at position 0Returns1.  out char: converted string in ISO formatExample    include(\"utf8.inc.ipng\");    function main (argv.() char) int{        var utfString = \"Süße Eichhörnchen kosten viele €\";        // ommition pos sets it to 0 by default        var isoString = UTF8::convUTF8toISO(utfString);    }"
    },
    {
        "id": "165",
        "path": "Operators/array_access.md",
        "title": "array-like access",
        "body": "array-like accessGeneralAccess types as though they were arrays-   extract = string[idx];-   extract = bytechain[idx];Ranged access possible-   subStr = string[idx..idy];-   subByCh = bytechain[idx..idy];Usage    var someStr char = \"Now this is a story all about how...\"    // Array-like access    var charAtPos4 char = someStr[4];    // result charAtPos3 := \"t\";    // Ranged access    var subStr char = someStr[0..2];    // result subStr := \"Now\";Compatible Types-   byte-   char"
    },
    {
        "id": "166",
        "path": "Operators/basic_math.md",
        "title": "Basic math",
        "body": "Basic mathOperators{left} + {right}    var number = 5 + 1;    number += 4;{left} - {right}    var number = 6 - 1;    number -= 5;{left} * {right}    var number = 5 * 1;    number *= 2;{left} / {right}    var number = 40 / 2;    number /= 2;{left} % {right}    var number = 5 % 2;    number %= 3;Returns-   int || long || float || double : result of expressionCompatible Types-   int-   uint-   long-   ulong-   float (‘%’ is not compatible with floating point numbers)-   double (‘%’ is not compatible with floating point numbers)"
    },
    {
        "id": "167",
        "path": "Operators/compare.md",
        "title": "compare",
        "body": "compareWorks for primitive types.Equivalent to std::compareOperatorsLess than{left} < {right}------------------------------------------------------------------------Less or equal{left} <= {right}------------------------------------------------------------------------Greater than{left} > {right}------------------------------------------------------------------------Greater or equal{left} >= {right}------------------------------------------------------------------------Equal{left} == {right}------------------------------------------------------------------------Unequal{left} != {right}------------------------------------------------------------------------Returns-   bool : expression is true/falseCompatible Types-   int-   uint-   long-   ulong-   float-   double-   char-   byte"
    },
    {
        "id": "168",
        "path": "Operators/concatenate.md",
        "title": "(Concatenate)",
        "body": "(Concatenate)General-   Concatenates bytechains and Strings-   result = {left arg} # {right arg}-   Can concatenate string with bytechainUsage    var concatStr char = \"Hello\" # \" World!\";    // result concatStr := \"Hello World!\"    concatStr #= \" Goodbye now!\";    // result concatStr := \"Hello World! Goodbye now!\"    var concatByte byte = <C0> # <FF EE>;    // result concatByte := <CO FF EE>    concatByte #=  <15 be 57>;    // result concatByte := <CO FF EE 15 BE 57>    //================================================    /* Mixed Concatenation */    var byteConcStr char = <54 68 69 73> # \" works\";    // result byteConcStr := \"This works\";    var byteConcStr char = <54 68 69 73> # \" works\";    // result byteConcStr := <54 68 69 73 20 77 6f 72 6b 73>;Compatible Types-   char-   byte"
    },
    {
        "id": "169",
        "path": "/README.md",
        "title": "llaborative ipng Manual.",
        "body": "aborative ipng Manual.Either clone repo and edit .md files, or clone repo and host repo-rootdirectory and edit contents via the webinterface.Current statusStill in early documentation, but basics should be available.Functions1.  When hosted with php enabled webserver:    1.  View documents    2.  Edit existing documents    3.  Create new documents2.  Without webserver    1.  Edit/View/Create directly        1.  Dont forget to pushUpcoming (???)1.  Push changes via webinterface"
    },
    {
        "id": "170",
        "path": "/Table_of_contents.md",
        "title": " Installation",
        "body": "Installation-   Install ipng-   Install package-   Editor SettingsGeneral-   main function-   functions-   controlflowObject Oriented Programming-   classes-   inheritanceTypes-   idle {}-   any-   auto-   char-   byte-   int-   uint-   long-   ulong-   float-   double-   list-   treeBasic Operations-   compare (<, >, <=, >=, ==, !=)-   math (+, -, *, /, %)-   concatenate (#)-   access ([idx])Built-in-   echo-   sizeof(obj any) intNamespacesstd-   std Functions-   std Constantssubspace std-   Table of Contents: Subspaces-   std::_byte-   std::_char-   std::_int-   std::_uint-   std::_long-   std::_ulong-   std::_float-   std::_double-   std::Net-   std::Base64-   std::Base64URL------------------------------------------------------------------------iplinkFunctions-   iplink::pack(toPack any) byte-   iplink::unpack(toUnpack byte, pos int) any------------------------------------------------------------------------UTF8Functions-   UTF8::convUTF8toISO(in char, pos int = 0) char-   UTF8::convUTFtoISO(in char, pos int = 0) charConstants (for conversion)-   UTF8 to ISO table-   ISO to UTF8 table------------------------------------------------------------------------asciiFunctions-   ascii::isalnum(in char) bool-   ascii::isalpha(in char) bool-   ascii::isascii(in char) bool-   ascii::isdigit(in char) bool-   ascii::islower(in char) bool-   ascii::isupper(in char) bool-   ascii::split(in char, pos int, delim char) .() char-   ascii::tolower(in char) char-   ascii::toupper(in char) charConstants-   Control Characters Table"
    },
    {
        "id": "171",
        "path": "Types/any/any.md",
        "title": "any",
        "body": "anyGeneral-   Purely runtime-type-   can assume any Type-   can be reassigned to any Type after first initialisation-   current assumed type can be checked (at runtime) with std::typeofInitialisation/Declaration    // declaration    var anyType any;    //==================    // declaration + initialisation    var anyType any = 42;    // type of 'anyType' is 'int'    //==================    // declaration + initialisation followed by reassignement    var anyType any = 42;    // type of 'anyType' is 'int'    anyType = \"Not int anymore!\";    // type of 'anytype' changed to 'char' (can check with 'std::typeof(anyType)')OperationsAll operations supported by the currently assumed TypeRelated"
    },
    {
        "id": "172",
        "path": "Types/auto/auto.md",
        "title": "(auto)",
        "body": "(auto)General-   Similar to auto type in c++(11<)-   Compile-time type-   Can not be reassigned to different type after first initialisation    (unlike ‘any’)-   Can not be declared without initialisation-   variable will be of type auto when no type is specified in    initialisationInitialisation/Declaration    // declaration    // => declaration without initialisation is not possible    //==================    // declaration + initialisation    var autoType = \"Hello\";    // ~~~~~~~~~^ notice missing type => variable will be of assigned type (rvalue type)    // resulting type: charOperationsAll operations supported by the currently assumed TypeRelated"
    },
    {
        "id": "173",
        "path": "Types/bool/bool.md",
        "title": "bool",
        "body": "boolGeneral-   like in any other language-   can be true or falseInitialisation/Declaration    // declaration    var cond bool;    //==================      // declaration + initialisation    var cond bool = true; // spaces between chars are optionalOperations    if(cond != false){        // do something    }-   compare (<, >, <=, >=, ==, !=)"
    },
    {
        "id": "174",
        "path": "Types/byte/byte.md",
        "title": "byte",
        "body": "byteGeneral-   Bytechain of variable length-   bytes must be between ‘<’ ‘>’Initialisation/Declaration    // declaration    var byteChain byte;    //==================    // declaration + initialisation    var byteChain byte = <C0 FF EE>; // spaces between bytes are optionalOperations    var bych1 byte = <DE AD>;    bych1 = bych1 # <BE EF>; // concatenation    // result bych1 := <DE AD BE EF>    var bych2 byte = bych1[1]; // array access    // result bych2 := <AD>;    bych2 = bych1[1..3]; // ranged access    // resul bych2 := <AD BE EF>;    // boolean compare expressions    if(bych1 < bych2){...} // less than    if(bych1 <= bych2){...} // less or equal    if(bych1 > bych2){...} // greater    if(bych1 >= bych2){...} // greater or equal    if(bych1 == bych2){...} // equal    if(bych1 != bych2){...} // unequal-   concat (#)-   compare (<,>,<=,>=, ==, !=)-   access ([idx])Related-   byte Functions"
    },
    {
        "id": "175",
        "path": "Types/char/char.md",
        "title": "char",
        "body": "charGeneral-   String of variable length-   String must be between ‘\"’ ‘\"’-   Strings are in UTF-8Initialisation/Declaration    // declaration    var message char;    //==================      // declaration + initialisation    var message char = \"Hello!\"; // spaces between chars are optionalOperations    var str1 char = \"Hello\";    str1 = str1 # \" World!\"; // concatenation    // result str1 := \"Hello World!\"    var str2 char = str1[1]; // array access    // result str2 := \"e\";    bych2 = bych1[1..4]; // ranged access    // resul str2 := \"ello\";-   concat (#)-   compare (<, >, <=, >=, ==, !=)-   access ([idx])Related-   char Functions"
    },
    {
        "id": "176",
        "path": "Types/double/double.md",
        "title": "double",
        "body": "doubleGeneral-   Floatingpoint number 64bit-   Value should end with ‘FL’ to indicate ‘float long’/64bitInitialisation/Declaration    // declaration    var gkz double;    //==================      // declaration + initialisation    var gkz double = 3.14FL;Operations-   math (+, -, *, /, %)-   compare (<,>,<=,>=, ==, !=)Related-   double Functions-   double Constants"
    },
    {
        "id": "177",
        "path": "Types/float/float.md",
        "title": "float",
        "body": "floatGeneral-   Floatingpoint number 32bit-   Value should end with ‘F’ to indicate ‘float’/32bitInitialisation/Declaration    // declaration    var gkz float;    //==================    // declaration + initialisation    var gkz float = 3.14F;Operations-   math (+, -, *, /, %)-   compare (<,>,<=,>=, ==, !=)Related-   float Functions-   float Functions"
    },
    {
        "id": "178",
        "path": "Types/idle/idle.md",
        "title": "{} (idle)",
        "body": "{} (idle)General-   Represents nothing (somewhat like ‘null’)-   Can be assigned to all types    -   No type can be assigned to idle variable!    -   IMPORTANT!        -   Can be assigned to auto, which will make the variable of            type idle, which cant be reassigned. If the resulting type            is unclear, use any instead-   Can be checked againstInitialisation/Declaration    // can be any other type than int aswell    var nothing int = {};Operations    var exists int = {};    // some ops later    if(exists == {}){        echo \"not existing\n\";    }Related"
    },
    {
        "id": "179",
        "path": "Types/int/int.md",
        "title": "int",
        "body": "intGeneral-   Signed Integer 32bit-   Range: [-2147483648,2147483647]Initialisation/Declaration    // declaration    var number int;    //==================      // declaration + initialisation    var number int = 0;Operations    number = number + 1; // addition    number = number - 1; // subtraction    number = number * 1; // multiplication    number = number / 1; // division    number = number % 1; // modulo    // boolean expressions    if(number < 1){...} // less than    if(number <= 1){...} // less or equal    if(number > 1){...} // greater    if(number >= 1){...} // greater or equal    if(number == 1){...} // equal    if(number != 1){...} // unequal-   basic_math-   compare(<, >, <=, >=, ==, !=)Related:-   int Functions-   int Constants"
    },
    {
        "id": "180",
        "path": "Types/list/list.md",
        "title": "list.() {[Type](../../Table_of_contents.md#types)}",
        "body": "list.() {Type}General-   Lists can be of these Types-   Lists can be nested with Lists or tree-   Initialisation/Declaration    // declaration    var myList.() char; // list of strings    //==================    /* Example 1 */    // declaration + initialisation    var myList.() char { // list of strings        .() = \"Hello\";     // set last element to         .() = \"World\";     // set last element to    };    //==================    /* Example 2 */    // declaration followed by initialisation    var myList.() char;    myList.() = \"Hello\";     // set last element to     myList.() = \"World\";     // set last element toList access READ    // example List for following Showcases    var exampleList.() char {        .() = \"Hello\";        .() = \"World\";        .() = \"Cya\";        .() = \"soon\";    };Get number of Elements in listPutting a ‘$’ infront of a list will return the number of elements inthe list.    var numOfElem int = $exampleList;    // result := 4;Check if list has a value stored at idxPutting a ‘?’ infront of an index-accessed-list will return wether itexists or not.    var idx int = 5;    if(?exampleList.(idx) == true){...}    // if expression would evaluate to false since list has only 4 elementsGet First elementSimilar to arrays (c/c++/java/etc…) lists can be accessd with an index.    // access first element with .(0)    echo std::display(exampleList.(0));    // result := \"Hello\";Element between start and End (idx)    // access third element in exampleList    echo std::display(exampleList.(2));    // result := \"Cya\";Get Last elementPutting’$' as the index will always return the last item in the list. ```c++ // access last element with .($)echo std::display(exampleList.($)); // result := “soon”;    ### List access WRITE    ```c++    // example List for following Showcases    var exampleList.() char {        .() = \"Hello\";        .() = \"World\";        .() = \"Cya\";        .() = \"soon\";    };Insert Element as new first ElementIf a first element exists, inserting at .(0) will not replace the firstelement but rather set the inserted element as the new head of the list.If no element exists the inserted element will become the first element.    exampleList.(0) = \"This is now the first Item!\";    // result := .()=\"This is now the first Item!\";.()=\"Hello\";.()=\"World\";.()=\"Cya\";.()=\"soon\";Insert Element at indexInserting an element at an index will append existing elements to theinserted element.    exampleList.(2) = \"This is now the third Item!\";    // result := .()=\"Hello\";.()=\"World\";.()=\"This is now the third Item!\";.()=\"Cya\";.()=\"soon\";Insert Element as new last elementPutting’$' as the index when assigning a value, it will always be set as the new last element. The previously last element will **not** be deleted. ```c++ exampleList.($)= “This is now the last Item!”; // result :=.()=“Hello”;.()=“World”;.()=“Cya”;.()=“soon”;.()=“This is now the lastItem!”;    #### Delete Element at index    Works with '0' and '$' aswell;    ```c++    ~exampleList.(1);    // result := .()=\"Hello\";.()=\"Cya\";.()=\"soon\";Delete entire List    ~exampleList;Related: __pel"
    },
    {
        "id": "181",
        "path": "Types/long/long.md",
        "title": "long",
        "body": "longGeneral-   Signed Integer 64bit-   Long numbers should end with ‘L’ to indicate 64bit-   Range: [-9223372036854775808L,9223372036854775807L]Initialisation/Declaration    // declaration    var number long;    //==================      // declaration + initialisation    var number long = 0L;Operations    number = number + 1; // addition    number = number - 1; // subtraction    number = number * 1; // multiplication    number = number / 1; // division    number = number % 1; // modulo    // boolean expressions    if(number < 1){...} // less than    if(number <= 1){...} // less or equal    if(number > 1){...} // greater    if(number >= 1){...} // greater or equal    if(number == 1){...} // equal    if(number != 1){...} // unequal-   basic_math-   compare(<, >, <=, >=, ==, !=)Related:-   long Functions-   long Constants"
    },
    {
        "id": "182",
        "path": "Types/tree/context.md",
        "title": "Context (Trees)",
        "body": "Context (Trees)General-   Every Branch in a Tree represents a so called “context”-   Values or nested lists/trees are stored within the context-   To work inside a branches context the branch needs to be opened-   ‘.’ denotes that you currently are within a context (similar to    ‘this’)-   Access to tree contents always via context, avoid common mistakesExample    // init tree with key:[char + char] and value:any    var exampleTree.[char].[char] any;    // create a branch with content    exampleTree.[\"branch_1\"].[\"branch_1_1\"]{        // '{' opens the context of branch .[branch_1].[branch_1_1]        // '.' denotes 'within the context of{...}'        . = \"Some value to store. In this case this value can assume any type(even a list or tree)\";    };    // create a branch within a context    exampleTree.[\"branch_1\"] {        // currently in context of branch.[branch_1]        // add new branch of type char and open its context        .[\"branch_1_2\"] {            // assign something            . = 1;        }    }    //MistakesWorking within a context is not the same as assigning something to abranch.    // declare tree with key:.[char + char] and value:.() int    var mistakeTree.[char].[char].() int;    // assign tree     mistakeTree = {        // span new tree with key.[char]        // add some branch        .[\"a\"] = {            // span new tree with key.[char]            // add some branch and assign value            .[1] = 1;        };    };The above code compiles without any errors!There are 4 Mistakes in the example code: 1. Not working in context (2Mistakes)    It may look like we are working with mistakeTree here, but in reality we are not.    We implicitly created a new tree with key.[any] and value any and assigned it to mistakeTree, losing any content it may has had beforehand.    - Mistake 1: not working within context of tree    - Mistake 2: overriding content unknowingly2.  No longer tree type conform (2 Mistakes)    You may have noticed that eventhough mistakeTree was declared as a    tree with key [char + char] and value .() int, we assigned a tree    with key .[char + int] and value int.    -   Mistake 3: using wrong key type    -   Mistake 4: using wrong value typeThese mistakes happen very quickly and easily. However they are validipng code, making these types of mistakes undetectable at compile time,and near impossible to find (potential) errors at runtime.Related-   tree"
    },
    {
        "id": "183",
        "path": "Types/tree/tree.md",
        "title": "tree.[{key_type}] {value_type}",
        "body": "tree.[{key_type}] {value_type}Before reading about trees, please check out lists first!Before reading about trees, please check out context first!General-   AssociativeTrees with key and value    -   Keys define a branch    -   To access the value of a branch you need the key or the index of        the branch-   Possible key types:    -   auto    -   int    -   uint    -   long    -   ulong    -   byte    -   char    -   float    -   double-   Possible value types: Types    -   Trees can be nested with lists and trees    -   The examples in this document will use trees nested with lists        and trees (please check out lists before continuing)Initialisation/Declaration    // declaration    var someTree.[char].() int;    // tree with string-key and int.()-value    //==================    // declaration + initialisation    var someTree.[char].() int {        .[\"branch_0\"] {            .() = 0;            .() = -1;        };        .[\"branch_1\"] {            .() = 2;            .() = -3;        };    };    //==================    // explicitly nested tree declaration + initialisation    var someTree.[char].().[byte].() float {        .[\"branch_0\"] {            .() {                .[<DE>] {                    .() = 3.14F;                };            };            .() {                .[<AD>] {                    .() = 6.28F;                };            };        };        .[\"branch_1\"] {            .() {                .[<BE>] {                    .() = -3.14F;                };            };            .() {                .[<EF>] {                    .() = -6.28F;                };            };        };    };    //==================    // implicitly nested tree declaration + initialisation    var someTree.[char].() any {        .[\"branch_0\"] {            .() {                // this is a nested tree.[byte].() float                .[<DE>] {                    .() = 3.14F;                };            };            .() {                // this is a nested tree.[char].() int                .[\"AD\"] {                    .() = 6;                };            };        };        .[\"branch_1\"] {            .() {                .[\"a\"] {                    .() = -3.14F;                };            };            .() {                .[<EF>] {                    .() = -6.28F;                };            };        };    };Tree access READ    // example tree for following Showcases    var exampleTree.[int].() char {        .[21] {            .() = \"Hello\";            .() = \"World\";        };        .[42] {            .() = \"Cya\";            .() = \"soon\";        };    };Get number of KeysPutting a ‘$’ infront of a tree will return the number of keys in thecurrent layer of the tree. The number of keys can be used as a range ofindices to access branches without the proper key. This works the samefor any nested layer.    var numOfKeys int = $exampleTree;    // result := 2;Get key from branch with specified indexPutting ‘@’ infront of an index-accessed-branch of a tree will returnthe key. When using indicies to access branches, replace ‘.[{key}]’ with‘.({idx})’    // get first key via index    var firstKey int = @exampleTree.(0);    // result firstKey := 21;Check if a key existsPutting a ‘?’ infront of a key- or index-accessed-branch will returnwether it exists or not.    // key acccess    if(?exampleTree.[22] == true){...}    // expression would evaluate to false since tree has no key '22'    // index access    if(?exampleTree.(0) == true){...}    // expression evaluates to true since exampleTree has 2 branchesGet First element with a key    // access first element with key '21'    echo std::display(exampleTree.[21]);    // result := .()=\"Hello\";.()=\"World\";Get First element via indexExactly like lists, contents of tree-branches can be accessd with anindex. (replace .[{key}] with .({index})) )    // access first element with .(0)    echo std::display(exampleTree.(0));    // result := .()=\"Hello\";.()=\"World\";Get Last elementPutting’$' as the index will always return the content of the last branch of the tree. ```c++ // access last element with .($)echo std::display(exampleTree.($)); // result := .()=“Cya”;.()=“soon”;    ## List access WRITE    ```c++    // example List for following Showcases    var exampleTree.[int].[byte] char{        .[1] {            .[<01>] {                . = \"ciao\";            };        };        .[2] {            .[<01>] {                . = \"bella\";            };        };    };Insert Element as new first ElementIf a first element exists, inserting at .(0) will replace the firstelement (unlike with lists)    exampleTree.(0).(0) {        . = \"This is now the first Item!\";    };    // result = .[1]{.[<01>]=\"this is now the first item!\";}.[2]{.[<01>]=\"bella\";}Adding a branchInserting an element at a previously nonexisting branch will create thebranch and add the element to it.    // create new branch '<03>' within first branch '1'    exampleTree.(0).[<03>] {        . = \"This is now the second Item in the first branch!\";    };    // result := .[1]{.[<01>]=\"ciao\";.[<03>]=\"This is now the second Item in the first branch!\";}.[2]{.[<01>]=\"bella\";}Delete Branch with key    ~exampleTree.[1];    // result := .[2]{.[<01>]=\"bella\";}Delete Branch at indexWorks with ‘0’ and ‘$’ aswell;    ~exampleTree.(1);    // result := .[1]{.[<01>]=\"ciao\";}Delete entire Tree    ~exampleTree;Related"
    },
    {
        "id": "184",
        "path": "Types/uint/uint.md",
        "title": "uint",
        "body": "uintGeneral-   Unsigned Integer 32bit-   uint numbers should end with ‘U’ to indicate unsigned-32bit-   Range: [0U,4294967295U]Initialisation/Declaration    // declaration    var number uint;    //==================      // declaration + initialisation    var number uint = 0U;Operations    number = number + 1; // addition    number = number - 1; // subtraction    number = number * 1; // multiplication    number = number / 1; // division    number = number % 1; // modulo    // boolean expressions    if(number < 1){...} // less than    if(number <= 1){...} // less or equal    if(number > 1){...} // greater    if(number >= 1){...} // greater or equal    if(number == 1){...} // equal    if(number != 1){...} // unequal-   basic_math-   compare(<, >, <=, >=, ==, !=)Related:-   _uint Constants-   _uint Functions"
    },
    {
        "id": "185",
        "path": "Types/ulong/ulong.md",
        "title": "ulong",
        "body": "ulongGeneral-   Unsigned Integer 64bit-   ulong numbers should end with ‘UL’ to indicate unsigned-64bit-   Range: [0UL,18446744073709551615UL]Initialisation/Declaration    // declaration    var number ulong;    //==================      // declaration + initialisation    var number ulong = 0L;Operations    number = number + 1; // addition    number = number - 1; // subtraction    number = number * 1; // multiplication    number = number / 1; // division    number = number % 1; // modulo    // boolean expressions    if(number < 1){...} // less than    if(number <= 1){...} // less or equal    if(number > 1){...} // greater    if(number >= 1){...} // greater or equal    if(number == 1){...} // equal    if(number != 1){...} // unequal-   basic_math-   compare(<, >, <=, >=, ==, !=)Related:-   ulong Functions-   ulong Constants"
    },
    {
        "id": "186",
        "path": "builtin/functions/echo.md",
        "title": "echo {[char](../../Types/char/char.md)}",
        "body": "echo {char}General-   print string to console-   works with inline concatenationUsage    /* Example 1 */    echo \"Hello World!\";    // prints to console: \"Hello World!\"    /* Example 2 */    var str1 char = \"How old \";    echo str1 # \"are you?\";    // prints to console: \"How old are you?\"    /* Example 3: Variant 1 */    var num1 int = 24;    echo \"I am \" # std::display(num1) # \" years old.\";    // prints to console: \"I am 24 years old.\"    /* Example 3: Variant 2 */    var num1 int = 24;    echo std::form(\"I am %d years old.\", num1);    // prints to console: \"I am 24 years old.\"Related-   char-   std::endl-   concatenate-   std::display-   std::form"
    },
    {
        "id": "187",
        "path": "builtin/functions/sizeof.md",
        "title": "sizeof(obj any) int",
        "body": "sizeof(obj any) intArguments1.  obj any : Object of type char or byteReturns-   out int : size of string/bytechain in bytesExample    var myString = \"This is a test\";    var myStrLen = sizeof(myString);    // => 14Related-   char-   byteUses  [[]]"
    },
    {
        "id": "188",
        "path": "object_oriented/class.md",
        "title": "Class",
        "body": "ClassClasses are used for Object-Oriented-Programming.Classes automatically generate a namespace of the same name as the class    // class [class_name] {...}    class myStack{...}MembersMembers of a class are specified with a leading ‘.’    // class [class_name] {...}    class myStack{        // integer member of class 'myStack'        .count int;        // list member of class 'myStack'        .content.() any;        ...    }Members are always accessible, there is no public/private modifier inipng. To access members of an object‘[variable_name].[member_to_access]’:    var someStack myStack = myStack::Create();    // access count of stack    myStack.count = 1;ConstructorConstructors are defined with a leading ‘ctor’.The default constructor should always be called “Create”.Constructors can not be overloaded (there is no overloading in ipngexcept for virtual methods), therefore a class with multipleconstructors needs a different name for each constructor.Inside the Constructor and Methods, Members of the object can beaccessed with the keyword ‘this’.    // class [class_name] {...}    class myStack{        // integer member of class 'myStack'        .count int;        // list member of class 'myStack'        .content.() any;        ...        // a constructor        ctor Create(){            this.count = 0;        }        // a different constructor        ctor CreateNotEmpty(obj any){            this.content.($) = obj;            this.count = 1;        }    }DestructorDestructors are defined with the keyword ‘dtor’.Each Class can have only one destructor.    // class [class_name] {...}    class myStack{        // integer member of class 'myStack'        .count int;        // list member of class 'myStack'        .content.() any;        ...        // a constructor        ctor Create(){            this.count = 0;        }        // a different constructor        ctor CreateNotEmpty(obj any){            this.content.($) = obj;            this.count = 1;        }        dtor Destroy(){            echo \"deleting...\n\";            ~this;        }    }The destructor cant be called directly. You call it implicitly by usingthe ‘~’ operator.    function main(argv.() char) int{        // create stack        var someStk myStack = myStack::CreateNotEmpty(1);        // do stuff ...        // delete stack        ~someStk;        // => deleting ...        return 1;    }MethodsMethods for objects are defined with the keyword ‘method’.Methods can manipulate the object they are called on.(Read more about methods in inheritance doc).Methods can have return types    // class [class_name] {...}    class myStack{        .count int;        .content.() any;        // method to push element on stack        method push(obj any){            this.content.($) = obj;            this.count += 1;        }        // method to pop element from stack        method pop() any{            if(this.count == 0){                return {};            }            var toReturn = this.content.($);            ~this.content.($);            this.count -= 1;            return toReturn;        }        // method to look at the top of the stack        method peek() any{            if(this.count == 0){                return {};            }            return this.content.($);        }        ctor Create(){            this.count = 0;        }        ctor CreateNotEmpty(obj any){            this:push(obj);        }    }To call a method on an object, use ‘[variable_name]:[method_to_call]’ :    var someStack myStack = myStack::Create();    // call push on 'someStack'    someStack:push(1);Usage ExampleThis example uses the class ‘myStack’ defined above    function dirWalk(startPath char) int {        // get all dirs        var dirTree = std::list_dir(startPath);        // create stack to push current dir to        var dirStack myStack = myStack::Create();        // create stack to keep indicies when changing dir        var idxStack myStack = myStack::Create();        /*<< loop vars >>*/        // stat of current File        var curStat any;        // current (abs) path        var curPath char = startPath;        // current File (name only)        var curKey char;        // main loop over all dirs        for(var idx = 2; idx < $dirTree; idx++){            // get stat of current file            curStat = std::stat(curPath # \"/\" # @dirTree.(idx));            // check if file or folder            if(std::ISDIR(&curStat)){                //  * is dir                //* 1. Mirror current dir in export/                if(buildExportDir(&exportPath, &dirStack, @dirTree.(idx)) != true){                    return 1;                }                //* 2. Push currently looked at folder name on dirStack                dirStack:push(@dirTree.(idx));                //* 3. Push current index on idxStack                idxStack:push(idx);                //* 4. Reset index for next dir                idx = 2;                //* 5. Set curPath to curpath/curDir                curPath = startPath # \"/\" # pathBuild(&dirStack);                //* 6. Get contents of new curpath                dirTree = std::list_dir(curPath);                continue;            }else /*if(std::ISREG(&curStat))*/{                /**                 * is file                 */                //* 1. get file (only name)                curKey = @dirTree.(idx);                //* 2. check if file is markdown file                //* => not md? do nothing                if(curKey[sizeof(curKey)-3..$] == \".md\"){                    //* 3. convert md to html                    convMD2HTML(&curPath, &curKey);                    //* 4. fix links                    htmlFixLink(&curPath, curKey[0..sizeof(curKey)-4] # \".html\");                    //* 5. add link to css-file to html                    appendStyle2HTML(&curPath, curKey[0..sizeof(curKey)-4] # \".html\", styleImport, dirStack.count);                    //* 6. move html to mirrored export/ directory                    copyHTML2Export(&curPath, &exportPath, &dirStack, &curKey);                }            }            // check if done with current folder            while(idx == $dirTree-1){                // check if idxStack is empty                if(idxStack.count == 0){                    // Everything done!                    break;                }                // not done yet!                // get idx from before cd                idx = (int) idxStack:pop();                // remove current dir from dirStack                dirStack:pop();                // set curPath to containing folder                curPath = startPath # \"/\" # pathBuild(&dirStack);                // get contents of curPath for next loop                dirTree = std::list_dir(curPath);            }        }        return 0;    }    function main (argv.() char){        dirWalk(std::BDIR);    }Related-   inheritance"
    },
    {
        "id": "189",
        "path": "object_oriented/inheritance.md",
        "title": "Inheritance",
        "body": "InheritanceClasses can inherit members and methods from a baseclass (superclass).The baseclass to inerit from can define virtual methods which can be“overridden” by childclasses.GeneralInheritance is identified by ‘:’ between the class that inherits and theclass it inherits from.Take classes ‘dim1D’ and ‘dim2D’, where class dim1D is the baseclass fordim2D to inherit from:    // baseclass 'dim1D'    class dim1D{        .px int;        ctor Create(x int){            this.px = x;        }        // method for example in '## Methods'        method print(){            echo \"px: \" # std::display(this.px);        }    }    // childclass 'dim2D' inherits from 'dim1D'    class dim2D : dim1D{        .py int;        ctor Create(x int, y int){            // call constructor of baseclass 'dim1D'            dim1D::Create(x);            this.py = y;        }    }Objects of class dim2D extend class dim1D by adding a new member ‘py’.Childclasses can be inherited from:    class dim3D : dim2D{        .pz int;        ctor Create(x int, y int, z int){            // call ctor of dim2D            dim2D::Create(x, y);            this.pz = z;        }    }Objects from class dim3D extend class dim2D, which extends class dim1D.MethodsAny method declared in the baseclass is accessible from any childclassthat inherits from the baseclassGiven the classes ‘dim1D’, ‘dim2D’, ‘dim3D’    function main (argv.() char) int {        var test dim3D = dim3D::Create(1, 2, 3);        test:print();        return 0;    }The output in this case would be ‘px: 1’, since the print method is onlydeclared and implemented in the baseclass ‘dim1D’.Overriding MethodsInheritance allows for methods to be overridden.Given the classes ‘dim1D’,‘dim2D’,‘dim3D’ we extend ‘dim2D’ with themethod ‘print()’.    class dim2D : dim1D {        .py int;        ctor Create(x int, y int){            dim1D::Create        }        method print(){            echo \"px: \" # std::display(this.px) # \" py: \" # std::display(this.py) ;        }    }which overrides the ‘print()’ method for all objects of class ‘dim2D’and ‘dim3D’, but not for objects of class ‘dim1D’    function main (argv.() char) int {        var test1 dim2D = dim2D::Create(1, 2);        test1:print();        // => px: 1 py: 2        return 0;    }However overriding non-virtual methods results in compile time binding.    function main (argv.() char) int {        var test1 dim1D = dim2D::Create(1, 2);        // ~~~~~~~~~^ setting var type to baseclass but calling childclass ctor        test1:print();        // => px: 1        return 0;    }In the above example the print method of dim1D will be called becausethe compile time type is dim1D and not dim2D (!check with AV!), so eventhough test1 contains an instance of dim2D, its handled as though it isan object of dim1D.Virtual methodsTo achieve runtime binding, methods need to be declared with the virtualkeyword.    class dim1D{        .px int;        ctor Create(x int){            this.px = x;        }        // method to be overridden by childclasses        virtual method print(){            echo \"px: \" # std::display(this.px);        }    }    class dim2D{        .py int;        ctor Create(x int, y int){            dim1D::Create(x);            this.py = y;        }        // override method for print method from dim1D        virtual method print(){            echo \"px: \" # std::display(this.px);            echo \"py: \" # std::display(this.py);        }    }    function main (argv.() char) int{        var t1 dim1D = dim2D::Create(1, 2);        t1:print();        // => px: 1 py: 2        return 1;    }Now, eventhough t1 is declared as an object of dim1D, the print methodfrom dim2D is called.Related-   Classes"
    }
]